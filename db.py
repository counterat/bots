from datetime import datetime
from random import randint
from sqlalchemy import create_engine, Column, Integer, String, Float, JSON, DateTime, Boolean, ForeignKey,ARRAY
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.orm import relationship
import copy
Base = declarative_base()


class Worker(Base):
    __tablename__ = 'workers'
    service_id = Column(Integer, default=randint(100000000, 999999999))
    telegram_id = Column(Integer, primary_key=True)
    name = Column(String)
    profit = Column(Float, default=0.0)
    profit_quantity = Column(Integer, default=0)
    balance = Column(Float, default=0.0)
    warnings = Column(Integer, default=0)
    payment_method = Column(String, default='Crypto USDT')
    created_at = Column(DateTime, default=datetime.utcnow)
    mammonts = Column(String, default='')
    invited_worker = Column(String, default='')
    token = Column(String)
    token_for_escort_bot = Column(String)
    additional_models = Column(JSON)
    mammonts_from_escort = Column(String, default='')
    children = relationship("Mammoth", back_populates="parent")

class MammothFromEscort(Base):
    __tablename__ = 'mammonths_from_escort'
    first_name = Column(String)
    telegram_id = Column(Integer, primary_key=True)
    service_id = Column(Integer)
    balance = Column(Float, default=0.0)
    was_using_support = Column(Boolean, default=False)

class Mammoth(Base):
    __tablename__ = 'mammonths'
    first_name = Column(String)
    telegram_id = Column(Integer, primary_key=True)
    service_id = Column(Integer)
    balance = Column(Float, default=0.0)
    on_output = Column(Float, default=0.0)
    cryptoportfolio = Column(JSON, default={'btc': 0.0, 'eth': 0.0,'ltc':0.0})
    succesful_deals = Column(Integer, default=0)
    deals = Column(Integer, default=0)
    luck = Column(Integer, default=50)
    min_input_output_amount_value = Column(Integer, default=2000)
    created_at = Column(DateTime, default=datetime.now())
    belongs_to_worker = Column(Integer, ForeignKey('workers.telegram_id'))
    profit = Column(Float, default=0.0)
    was_using_support = Column(Boolean, default=False)

    parent = relationship("Worker", back_populates="children")
class Futures(Base):
    __tablename__ = 'futures'
    id = Column(Integer, primary_key=True)
    message_id = Column(Integer)
    chat_id = Column(Integer)
    user_id = Column(Integer)
    cryptosymbol = Column(String)
    pool = Column(Float)
    is_increase = Column(Boolean)
    start_price = Column(Float)

class Withdraws(Base):
    __tablename__ = 'withdraws'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer)
    card = Column(Integer)
    amount = Column(Float)

class Payouts(Base):
    __tablename__ = 'payouts'
    order_id = Column(Integer, primary_key=True)
    worker_id = Column(Integer)
    currency = Column(String, default='RUB')
    to_currency = Column(String, default='USDT')
    amount = Column(Float)
    address = Column(String)
    course_source = Column(String, default='Binance')
    is_subtract = Column(Boolean, default=False)
    network = Column(String, default='TRON')

class MammonthTopUpWithCrypto(Base):
    __tablename__ = 'mammonth_top_up_with_crypto'
    order_id = Column(String)
    mammonth_id = Column(Integer)
    amount = Column(Float)
    created_at = Column(DateTime, default=datetime.now())
    cryptomus_link = Column(String)
    uuid = Column(String, primary_key=True)


class Sluts(Base):
    __tablename__ = 'sluts'
    slut_id = Column(Integer, primary_key=True)
    name = Column(String)
    age = Column(Integer)
    prices = Column(JSON)
    description = Column(String)
    services = Column(String)

class ReviewsAboutSluts(Base):
    __tablename__ = 'reviews_about_sluts'
    review_id = Column(Integer, primary_key=True)
    slut_id = Column(Integer)
    name = Column(String)
    date = Column(DateTime)
    text = Column(String)


engine = create_engine('sqlite:///mydatabase.db')


Base.metadata.create_all(engine)
# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é SQLAlchemy
Session = sessionmaker(bind=engine)
session = Session()

# slut1 = Sluts(name = '–†–∏–∞–Ω–∞', age = 24, description = '''
# –ö–æ—Ä–æ–ª–µ–≤–∞ –º–∏–Ω–µ—Ç–∞, –≥–æ—Ç–æ–≤–∞ —É–±–ª–∞–∂–∏—Ç—å —Ç–µ–±—è –¥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–º–æ–ø–æ–º—Ä–∞—á–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±—è –ø–æ–¥—á–∏–Ω—è—Ç—å—Å—è. –õ—é–±–ª—é –ø–æ–∂—ë—Å—Ç—á–µ))
# ''', services = '''–ú–ë–†, –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤ —Ä–æ—Ç, –ª–µ–≥–∫–∞—è –¥–æ–º–∏–Ω–∞—Ü–∏—è, —Å–∞–¥–æ-–º–∞–∑–æ''', prices={'–ß–∞—Å':4600, "2 —á–∞—Å–∞":8500, '–ù–æ—á—å':21100 })
#
# slut2 = Sluts(name = '–ù–∞—Ç–∞—à–µ–Ω—å–∫–∞', age = 26, description = '''
# –ñ–∞—Ä–∫–∞—è –º–∞–ª—ã—à–∫–∞ —Å –æ—á–µ–Ω—å –∞–ø–ø–µ—Ç–∏—Ç–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏ –∏ —Å–ª–∞–¥–∫–∏–º–∏ –¥—ã—Ä–æ—á–∫–∞–º–∏. –ü–æ–∫–∞–∑—ã–≤–∞—é –≤—Å—é —Ä–æ—Å–∫–æ—à—Å—Ç—å —Å–≤–æ–µ–≥–æ —Ç–µ–ª–∞ –∏ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≥–æ—Ç–æ–≤–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ —ç–º–æ—Ü–∏–∏üî•
# ''', services = '''–ö—É–Ω–∏–ª–∏–Ω–≥—É—Å, —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –∫–æ—Å—Ç—é–º—ã, —Å—Ç—Ä–∏–ø—Ç–∏–∑''', prices={'–ß–∞—Å':5300, "2 —á–∞—Å–∞":9200, '–ù–æ—á—å':21000 })
#
# slut3 = Sluts(name = '–ö—Ä–∏—Å—Ç–∏–Ω–∞', age = 22, description = '''
# –ú–µ–Ω—è –º–æ–∂–Ω–æ –æ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏: —è –ø–æ—Ö–æ—Ç–ª–∏–≤–∞—è –¥–µ–≤—á–æ–Ω–∫–∞ –∏ —Å–æ–≥–ª–∞—Å–Ω–∞ –Ω–∞ –ª—é–±—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–±–æ—é–¥–Ω–æ–≥–æ –æ—Ä–≥–∞–∑–º–∞ –≤ –ø–æ—Å—Ç–µ–ª–∏))
# ''', services = '''–ú–ë–†, –∞–Ω–∞–ª, —Å–µ–∫—Å-–∏–≥—Ä—É—à–∫–∏, —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã''', prices={'–ß–∞—Å':4500, "2 —á–∞—Å–∞":8000, '–ù–æ—á—å':12600 })
#
# slut4 = Sluts(name = '–ù–∞—Å—Ç—è', age = 24, description = '''
# –≠—Ç–∞ –¥–µ–≤–æ—á–∫–∞ –æ–±–ª–∞–¥–∞–µ—Ç —É–ø—Ä—É–≥–æ–π –ø–æ–ø–∫–æ–π –∏ –∑–∞–≤–æ–¥–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º, —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–∞–∂–¥–æ–º—É!
# ''', services = '''–ú–ë–†, –∞–Ω–∞–ª, —Ñ–∏–Ω–≥–µ—Ä–∏–Ω–≥''', prices={'–ß–∞—Å':6500, "2 —á–∞—Å–∞":12000, '–ù–æ—á—å':22300 })
#
# slut5 = Sluts(name = '–í–∏–∫–∞', age = 24, description = '''
# –§–∏–Ω–≥–µ—Ä–∏–Ω–≥, –±–æ–Ω–¥–∞–∂, –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–∞ –≥—Ä—É–¥—å''', services = '''–§–∏–Ω–≥–µ—Ä–∏–Ω–≥, –±–æ–Ω–¥–∞–∂, –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–∞ –≥—Ä—É–¥—å''', prices={'–ß–∞—Å':4500, "2 —á–∞—Å–∞":8600, '–ù–æ—á—å':18000 })
#
# slut6 = Sluts(name = '–ù–∞—Ç–∞—à–∞', age = 27, description = '''
# –ì–æ—Ä—è—á–∞—è –∏ —Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è –¥–µ–≤–æ—á–∫–∞, —Å–ø–æ—Å–æ–±–Ω–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –∫–∞–∂–¥–æ–≥–æ –º—É–∂—á–∏–Ω—É —Å–≤–æ–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏)''', services = '''–ê–Ω–∞–ª, —Å–µ–∫—Å-–∏–≥—Ä—É—à–∫–∏, –ú–ë–†, –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤ —Ä–æ—Ç,
# –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–∞ –≥—Ä—É–¥—å''', prices={'–ß–∞—Å':8500, "2 —á–∞—Å–∞":16100, '–ù–æ—á—å':56400 })
#
# slut7 = Sluts(name = '–í–∞–ª–µ—Ä–∏—è', age = 24, description = '''
# –®–∏—Ä–æ–∫–æ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤ —É–∑–∫–∏—Ö –∫—Ä—É–≥–∞—Ö –í–∞–ª–µ—Ä–∏—è —Å–≤–æ–¥–∏—Ç —Å —É–º–∞ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —É–∂–µ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 2 –ª–µ—Ç. –ü–æ—Ä–∞ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –Ω–∞ –ø–æ—Ç–æ–º, –≤–æ–∑—å–º–∏ –≤—Å–µ —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
# ''', prices={'–ß–∞—Å':12800, "2 —á–∞—Å–∞":24200, '–ù–æ—á—å':78600 }, services='''–ê–Ω–∞–ª, –ú–ë–†, –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤ —Ä–æ—Ç, –æ–∫–æ—á–∞–Ω–∏–µ –Ω–∞ –≥—Ä—É–¥—å, —Ñ–∏–Ω–≥–µ—Ä–∏–Ω–≥, –∫—É–Ω–∏–ª–∏–Ω–≥—É—Å, —Å–µ–∫—Å-–∏–≥—Ä—É—à–∫–∏''')
#
# slut8 = Sluts(name = '–Æ–ª—è', age = 23, description = '''
# –õ—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ª—é–±–∏—Ç –±–æ–ª—å—à—É—é –≥—Ä—É–¥—å –∏ –ø–æ–∫–æ—Ä–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –Æ–ª–µ—á—å–∫–∞ —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —ç—Ç–∏ –¥–≤–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞, –∫–∞–∫ –Ω–∏–∫—Ç–æ –¥—Ä—É–≥–æ–πüòç
# ''', prices={'–ß–∞—Å':10900, "2 —á–∞—Å–∞":19500, '–ù–æ—á—å':51500 }, services='''–ú–ë–†, –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–∞ –≥—Ä—É–¥—å, –ª–µ–≥–∫–æ–µ –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ''')
#
#
# session.add(slut1)
# session.add(slut2)
# session.add(slut3)
# session.add(slut4)
# session.add(slut5)
# session.add(slut6)
# session.add(slut7)
# session.add(slut8)
# session.commit()



# def return_datetime(date_str):
#     date_format = "%d.%m.%Y"
#     return datetime.strptime(date_str, date_format)
#
# list_for_reviews = []
# def save_in_db_review(review, slut_id=8):
#
#     processed_list = review.split('\n')[2:]
#     name = processed_list[0].split(' ')[0]
#     date = processed_list[0].split(' ')[1]
#     text = processed_list[1]
#     print(name,date,text)
#     slut_review = ReviewsAboutSluts(slut_id=slut_id, name=name, text=text,date=return_datetime(date))
#     session.add(slut_review)
#     session.commit()
#
# # for i in range(1,13):
# #     exec(f'''
# # session.add(review{i})
# # session.commit()
# #     ''')
# save_in_db_review(
#
# '''üíï–û—Ç–∑—ã–≤—ã –æ –º–æ–¥–µ–ª–∏:
#
# –ê–ª–µ–∫—Å–µ–π 09.06.2019
# –°–∞–º–∞ –±–µ–∑—É–º–Ω–æ –≤–æ–∑–±—É–∂–¥–∞–µ—Ç—Å—è –∏ –∫–∞–π—Ñ—É–µ—Ç –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞.
# ''')