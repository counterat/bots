import datetime
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, InputFile
from aiogram.dispatcher.filters.state import State, StatesGroup
from db import Worker, session, Mammoth
from img import generate_profile_stats_for_worker
from monobank import waiting_for_mamont_async
from  aws import sns, aws_region, aws_access_key_id, aws_secret_access_key


admin_chat_id  = '881704893'
API_TOKEN = '6697933833:AAFVFw0NlunxTO741GRBf3krcjDbIL_mXp8'



logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


def top_up_balance():
    return InlineKeyboardMarkup().add(InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='top_up_balance'))

def top_up_balance_by_card():
    return InlineKeyboardMarkup().add(InlineKeyboardButton('–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data='top_up_balance_by_card'))




markup = ReplyKeyboardMarkup(resize_keyboard=True)
portfolio = KeyboardButton('–ü–æ—Ä—Ç—Ñ–µ–ª—å üìÇ')
open_ecn = KeyboardButton('–û—Ç–∫—Ä—ã—Ç—å ECN üíπ')
info = KeyboardButton('–ò–Ω—Ñ–æ ‚Ñπ')
support = KeyboardButton('–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üåê')

markup.add(portfolio)
markup.add(open_ecn)
markup.add(info,support)

class PortfolioStates(StatesGroup):
    ShowPortfolio = State()


class TopUpBalance(StatesGroup):
    WaitingForSum = State

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_param = message.get_args()
    print('param')
    print(user_param)
    await message.answer(user_param)
    first_name = message['from']['first_name']
    template = f"""
*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {first_name}*

–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Hotbit  –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö. –ê —Ç–∞–∫–∂–µ –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫.
    
    
    
    """


    if not session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id).first():
        await message.reply(template, parse_mode=ParseMode.MARKDOWN, reply_markup=markup)
        new_mammonth = Mammoth(telegram_id = message.from_user.id)
        session.add(new_mammonth)
        session.commit()
    else:
        await showportfolio(message)

@dp.message_handler(lambda message: message.text == '–ü–æ—Ä—Ç—Ñ–µ–ª—å üìÇ')
async def portfolio_handler(message: types.Message):
    await message.answer("‚ö°")
    await showportfolio(message)

@dp.message_handler(lambda message: message.text == '–û—Ç–∫—Ä—ã—Ç—å ECN üíπ')
async def open_ecn_handler(message: types.Message):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –û—Ç–∫—Ä—ã—Ç—å ECN üíπ")

@dp.message_handler(lambda message: message.text == '–ò–Ω—Ñ–æ ‚Ñπ')
async def info_handler(message: types.Message):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ò–Ω—Ñ–æ ‚Ñπ")

@dp.message_handler(lambda message: message.text == '–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üåê')
async def support_handler(message: types.Message):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üåê")



@dp.message_handler(lambda message: not (2000 <= int(message.text) <= 250000), state=TopUpBalance.WaitingForSum )
async def waiting_for_sum_out_of_range(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—É–º–º—ã, –≤—ã—Ö–æ–¥—è—â–µ–π –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    """
    await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2000 –¥–æ 250000 —Ä—É–±–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")


@dp.message_handler(lambda message: 2000 <= int(message.text) <= 250000, state=TopUpBalance.WaitingForSum )
async def waiting_for_sum_handler(message: types.Message, state:FSMContext):
    await  message.answer('–ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞  –Ω–∞ –∫–∞—Ä—Ç—É `4441114419894785` –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç', parse_mode=ParseMode.MARKDOWN)

    message_attributes = {
        'WorkerId': {
            'DataType': 'Number',
            'StringValue': f'{admin_chat_id}'
        },
        'MammonthId': {
            'DataType': 'Number',
            'StringValue': f'{message.from_user.id}'
        },
        'Sum': {
            'DataType': 'Number',
            'StringValue': f'{message.text}'
        },
        'FirstName': {
            'DataType': 'String',
            'StringValue': f'{message.from_user.first_name}'
        },
    }
    sns.publish(TopicArn='arn:aws:sns:eu-north-1:441199499768:NewApplications',

                Message=f'''NewApplicationToTopUp''', MessageAttributes=message_attributes

                )
    await waiting_for_mamont_async(datetime.datetime.now(), 0, 'u3dL8d8BJIbUvxNFME1wIOOGdb6BDWUlnX3_Zc9976dc')


async def showportfolio(message: types.Message):

    user = session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id).first()


    template =    f"""
üìÇ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
*‚ö†Ô∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω*
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} RUB
üì§ –ù–∞ –≤—ã–≤–æ–¥–µ: {user.on_output} RUB
üíº –ö—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª—å:
        *{user.cryptoportfolio['btc']} BTC
        {user.cryptoportfolio['eth']} ETH
        {user.cryptoportfolio['ltc']} LTC*
–í–∞—à  ID - `{user.telegram_id}`
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ - {user.succesful_deals}
–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ - {user.deals}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ

–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {user.created_at.strftime("%d.%m.%Y %H:%M:%S")}  
    
    """
    with open('hotbit.jpg', 'rb') as image:
        await bot.send_photo(message.from_user.id, InputFile(image), caption=template, reply_markup=top_up_balance(), parse_mode=ParseMode.MARKDOWN)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'top_up_balance')
async def handle_top_up_balance(query: types.CallbackQuery):
    await query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.', reply_markup=top_up_balance_by_card())
    await query.message.delete()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'top_up_balance_by_card')
async def handle_top_up_balance_by_card(query: types.CallbackQuery):
    await TopUpBalance.WaitingForSum.set()
    await query.message.answer('üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 2500 RUB –¥–æ 250000 RUB')





if __name__ == '__main__':
    from aiogram import executor

    storage = MemoryStorage()
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º MemoryStorage –∫ –±–æ—Ç—É
    dp.storage = storage
    executor.start_polling(dp, skip_updates=True)

