import asyncio
import logging
import time
import json
from  aws import sns, aws_region, aws_access_key_id, aws_secret_access_key
import aiobotocore as aiobotocore
from aiobotocore.config import AioConfig
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, InputFile
from aiogram.dispatcher.filters.state import State, StatesGroup
from db import Worker, session, Mammoth
from img import generate_profile_stats_for_worker
from aiobotocore.session import get_session
admin_chat_id  = '881704893'
API_TOKEN = '6686215620:AAHPv-qUVFsAKH4ShiaGNfZWd0fHVYCX2qg'
from aws import  sqs
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


async def process_sqs_messages():
    session = get_session()

    async with session.create_client( service_name = 'sqs',
    aws_access_key_id=aws_access_key_id,
    aws_secret_access_key=aws_secret_access_key,
    region_name=aws_region) as sqs:
        while True:
            response = await sqs.receive_message(
                QueueUrl='https://sqs.eu-north-1.amazonaws.com/441199499768/NewApplications',
                AttributeNames=['All'],
                MaxNumberOfMessages=1,
                MessageAttributeNames=['All'],
                VisibilityTimeout=0,
                WaitTimeSeconds=0
            )
            try:
                diction = response['Messages'][0]['Body']
                msg_attributes = (json.loads(diction).get('MessageAttributes'))
                print(msg_attributes)
                await bot.send_message(
                    int(msg_attributes['WorkerId']['Value']),
                    f'''üíπ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! (–¢—Ä–µ–π–¥–∏–Ω–≥)
                    

üêò –ú–∞–º–æ–Ω—Ç: {msg_attributes['FirstName']['Value']} [/t138806]!!
üí≥ –°—É–º–º–∞: {msg_attributes['Sum']['Value']} RUB
                ''', reply_markup=create_top_up_mammonths_balance_button(mammonths_telegram_id=msg_attributes['MammonthId']['Value'], amount=msg_attributes['Sum']['Value'])
                )
                message = response['Messages'][0]
                receipt_handle = message['ReceiptHandle']
                await sqs.delete_message(QueueUrl='https://sqs.eu-north-1.amazonaws.com/441199499768/NewApplications', ReceiptHandle=receipt_handle)

            except Exception as ex:
                print(ex)
            await asyncio.sleep(10)


class QuestionsAndAnswersStates(StatesGroup):
    first = State()
    second = State()
    third = State()

def admin_approval_button():
    return InlineKeyboardMarkup().add(InlineKeyboardButton("–†–∞–∑—Ä–µ—à–∏—Ç—å –≤–æ—Ä–∫–µ—Ä—É —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='approvetocreateaccount'), InlineKeyboardButton(
        '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å', callback_data='disapprovetocreateaccount'))




def create_agree_button():
    return InlineKeyboardMarkup().add(InlineKeyboardButton('–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏', callback_data='agreewithterms'))


def create_verification_button():
    return InlineKeyboardMarkup().add(InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é', callback_data='verifyThatUserIsNotUkrainian'))

def create_top_up_mammonths_balance_button(mammonths_telegram_id, amount):
    return InlineKeyboardMarkup().add(InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='top_up_mammonths_balance', mammonths_telegram_id=mammonths_telegram_id, amount=amount))

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
markup = ReplyKeyboardMarkup(resize_keyboard=True)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
profile_button = KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å üê≥")
nft_button = KeyboardButton("NFT üí†")
trading_button = KeyboardButton("–¢—Ä–µ–π–¥–∏–Ω–≥ üìä")
casino_button = KeyboardButton("–ö–∞–∑–∏–Ω–æ üé∞")
arbitrage_button = KeyboardButton("–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê")
about_button = KeyboardButton("–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–Ω–æ–ø–æ–∫)
markup.add(profile_button, nft_button, trading_button)
markup.add(casino_button, arbitrage_button, about_button)






@dp.message_handler(lambda message: message.text in ["–ü—Ä–æ—Ñ–∏–ª—å üê≥", "NFT üí†", "–¢—Ä–µ–π–¥–∏–Ω–≥ üìä", "–ö–∞–∑–∏–Ω–æ üé∞", "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê", "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª"])
async def handle_menu(message: types.Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
    if message.text == "–ü—Ä–æ—Ñ–∏–ª—å üê≥":
        await showprofile(message)
    elif message.text == "NFT üí†":
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ 'NFT üí†'")
    elif message.text == "–¢—Ä–µ–π–¥–∏–Ω–≥ üìä":
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–¢—Ä–µ–π–¥–∏–Ω–≥ üìä'")
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ö–∞–∑–∏–Ω–æ üé∞'")
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê'")
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª'")


async def showprofile(message: types.Message):
    worker = session.query(Worker).filter(Worker.telegram_id == message.from_user.id).first()
    generate_profile_stats_for_worker(str(worker.telegram_id), str(worker.balance), str(worker.profit), str(worker.warnings), worker.payment_method )
    caption = f"""
üóÉ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å [{worker.telegram_id}],  0 —É—Ä–æ–≤–µ–Ω—å!

–ö–æ–¥ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤: 62954612!

üí∏ –£ —Ç–µ–±—è 0! –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É {worker.profit} RUB
–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç 0 RUB

–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: 0 –≤–æ—Ä–∫–µ—Ä–æ–≤!
–ë–∞–ª–∞–Ω—Å: {worker.balance} RUB
–°—Ç–∞—Ç—É—Å: –í–æ—Ä–∫–µ—Ä
–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: [{worker.warnings}/3]
–°–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã: {worker.payment_method}

–í –∫–æ–º–∞–Ω–¥–µ: 2 –¥–Ω—è

üåï –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ—Ä–∫–∞–µ–º!
    
    
    
    """


    with open(f'{worker.telegram_id}.png', 'rb') as img:
        await bot.send_photo(chat_id=message.chat.id, photo=InputFile(img), caption=caption, reply_markup=markup)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if not session.query(Worker).filter(Worker.telegram_id == message.from_user.id).first():
    # –¢–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
        rules_text = """
üí¨ –ü—Ä–∞–≤–∏–ª–∞ Binance Naeb  üí¨ 

–ó–∞–ø—Ä–µ—â–µ–Ω–æ:

`üî∏ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, 18+ GIF/–°—Ç–∏–∫–µ—Ä–æ–≤/–í–∏–¥–µ–æ/–§–æ—Ç–æ`
`üî∏ –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ`
`üî∏ –†–µ–∫–ª–∞–º–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–ª–∏ –∂–µ —É—Å–ª—É–≥`
`üî∏ –î–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ`
`üî∏ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã`
`üî∏ –°–ø–∞–º–∏—Ç—å –∏–ª–∏ —Ç–µ–≥–∞—Ç—å —Å—Ç–∞—Ñ—Ñ, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤–∞–º –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç –≤ –ª—Å`
`üî∏ –û—Å–∫–æ—Ä–±–ª—è—Ç—å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å/–≤—ã—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–∏ –ø–æ–ª–∏—Ç –≤–∑–≥–ª—è–¥—ã`
`üî∏ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –¢–ü –∫—Ä–æ–º–µ –±–æ—Ç–æ–≤ —Ç–∏–º—ã`
`üî∏ –û—Å–∫–æ—Ä–±–ª—è—Ç—å –ª—é–±–æ–≥–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏`

–í—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ ‚úÖ
    """

        await  message.answer('‚ö°', reply_markup=markup)
        msg = await message.reply(rules_text, parse_mode=ParseMode.MARKDOWN, reply_markup=create_agree_button())
    await showprofile(message)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'agreewithterms')
async def handle_agree_callback(query: types.CallbackQuery):
    await query.message.delete()
    await query.message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
                        "1. –£ –≤–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Ç–∞–∫–æ–π —Å—Ñ–µ—Ä–µ? (–î–∞/–ù–µ—Ç)")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await QuestionsAndAnswersStates.first.set()


@dp.message_handler(state=QuestionsAndAnswersStates.first)
async def answer1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id'] = message.from_user.id
        data['answer1'] = message.text.lower()
    # –ó–∞–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    await message.reply("2. –û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    await QuestionsAndAnswersStates.second.set()

@dp.message_handler(state=QuestionsAndAnswersStates.second)
async def answer2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['answer2'] = message.text
    # –ó–∞–¥–∞–µ–º —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
    await message.reply("3. –£ –≤–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Ç–∞–∫–æ–π —Å—Ñ–µ—Ä–µ? (–î–∞/–ù–µ—Ç)")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
    await QuestionsAndAnswersStates.third.set()


@dp.message_handler(state=QuestionsAndAnswersStates.third)
async def answer3(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['answer3'] = message.text.lower()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(admin_chat_id, f"–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{data['id']}` \n"
                                         f"1. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ: {data['answer1']}\n"
                                         f"2. –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {data['answer2']}\n"
                                         f"3. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ: {data['answer3']}", parse_mode=ParseMode.MARKDOWN, reply_markup=admin_approval_button())
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'top_up_mammonths_balance')
async def handle_top_up_mammonths_balance(query: types.CallbackQuery, mammonths_telegram_id, amount):
    mammonth = session.query(Mammoth).filter(Mammoth.telegram_id==mammonths_telegram_id).first()
    mammonth.balance += amount
    session.commit()
    await query.message.answer('–í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞—è–≤–∫—É', parse_mode=ParseMode.MARKDOWN)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'approvetocreateaccount')
async def handle_approve_callback(query: types.CallbackQuery):
    await bot.send_message(query['from']['id'], "–í—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –¢–µ–ø–µ—Ä—å –≤—ã –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤")

    chat_id = query.message.chat.id
    message_id = query.message.message_id
    new_user = Worker(telegram_id=query['from']['id'], name=query['from']['first_name'])
    session.add(new_user)
    session.commit()
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(chat_id, message_id)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'disapprovetocreateaccount')
async def handle_approve_callback(query: types.CallbackQuery):
    await bot.send_message(query['from']['id'], "–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤")
    chat_id = query.message.chat.id
    message_id = query.message.message_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(chat_id, message_id)




if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(process_sqs_messages())
    from aiogram import executor

    storage = MemoryStorage()
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º MemoryStorage –∫ –±–æ—Ç—É
    dp.storage = storage
    executor.start_polling(dp, skip_updates=True)
