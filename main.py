import asyncio
import logging
from datetime import timedelta, datetime
import json
from  aws import sns, aws_region, aws_access_key_id, aws_secret_access_key
import aiobotocore as aiobotocore
from aiobotocore.config import AioConfig
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, InputFile
from aiogram.dispatcher.filters.state import State, StatesGroup
from db import Worker, session, Mammoth, Withdraws, Payouts
from img import generate_profile_stats_for_worker
from test import create_mirror
from escortbot import create_mirror_of_escort_bot
from aiobotocore.session import get_session
import requests
from  diction import active_chats
from config_for_bots import payout_for_admins_bot_token
from payoutbot import create_mirror_of_payout_bot
admin_chat_id  = '881704893'
#API_TOKEN = '6686215620:AAHPv-qUVFsAKH4ShiaGNfZWd0fHVYCX2qg'
API_TOKEN = '6425684889:AAHTvfvQ2v1UbhBn72LbQiT3lXzWcW3aPk0'
from aws import  sqs
logging.basicConfig(level=logging.INFO)
import threading

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


support_team = ['881704893']


def withdraw_actions(withdraw_id):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'accept_withdraw_{withdraw_id}')).add(InlineKeyboardButton('–û—Ç–∫–æ–ª–Ω–∏—Ç—å',
                                                                                                                      callback_data=f'deny_withdraw_{withdraw_id}'))
    return keyboard


def mammont_management_buttons(mammonth_id):
    kb = InlineKeyboardMarkup()
    mammonth = session.query(Mammoth).filter(Mammoth.telegram_id == mammonth_id).first()
    kb.add(InlineKeyboardButton(f'–£–¥–∞—á–∞ {mammonth.luck}%', callback_data=json.dumps({'change_luck':mammonth_id})))
    kb.add(InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å', callback_data=json.dumps({'change_balance':mammonth_id})))
    kb.add((InlineKeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data=json.dumps({'show_stats':mammonth_id}))))
    return  kb
all_mammonts = session.query(Mammoth).all()

class DistributeStates(StatesGroup):
    first = State()

@dp.message_handler(commands=['stop_chat'])
async def stop_chat(message:types.Message):
    mammonth_id = active_chats[message.from_user.id]
    mammonth = session.query(Mammoth).filter(Mammoth.telegram_id == mammonth_id).first()
    token = session.query(Worker).filter(Worker.telegram_id == mammonth.belongs_to_worker).first().token
    data = {'chat_id': mammonth_id, 'text': '–û–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –≤–∞–º–∏'}
    await message.answer(active_chats)
    del active_chats[message.from_user.id]
    print(active_chats)
    requests.post(url=f'https://api.telegram.org/bot{token}/sendMessage', data=data)
    await message.answer('–í—ã —Ä–∞–∑–æ—Ä–≤–∞–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —é–∑–µ—Ä–æ–º')

@dp.message_handler(lambda message: message.chat.id in active_chats)
async def forward_message(message: types.Message):


    mammonth_id = active_chats[message.chat.id]
    mamonth = session.query(Mammoth).filter(Mammoth.telegram_id == mammonth_id).first()
    worker = session.query(Worker).filter(Worker.telegram_id == mamonth.belongs_to_worker).first()
    data = {'chat_id': mamonth.telegram_id, 'text': message.text}
    requests.post(url=f'https://api.telegram.org/bot{worker.token}/sendMessage', data=data)

    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–æ—Å–ª–∞–Ω–æ')
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('open_support_case_with_mammonth'))
async def handle_support_case_with_mammonth(query: types.CallbackQuery):
    mammonth_id = (query.data.split('_')[-1])
    for operator, mammonth in active_chats.items():
        if int(active_chats.get(operator)) == int(mammonth_id):
            await query.message.answer('–î—Ä—É–≥–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –æ–±—â–∞–µ—Ç—Å—è —Å –º–∞–º–º–æ–Ω—Ç–æ–º!')
            return 0

    mamonth = session.query(Mammoth).filter(Mammoth.telegram_id == mammonth_id).first()
    worker = session.query(Worker).filter(Worker.telegram_id == mamonth.belongs_to_worker).first()
    mamonth.was_using_support = True
    session.commit()
    inline_keyboard = {
        "inline_keyboard": [
            [
                {"text": "–ù–∞—á–∞—Ç—å —á–∞—Ç", "callback_data": f"start_chat_with_operator_{query.from_user.id}"},

            ]
        ]

    }
    data = {'chat_id': mamonth.telegram_id,
            'text': f'–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω! –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–ù–∞—á–∞—Ç—å —á–∞—Ç*.–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop_chat',
            "reply_markup":  inline_keyboard}
    response = requests.post(url=f'https://api.telegram.org/bot{worker.token}/sendMessage', json=data)

    active_chats[query.from_user.id] = query.data.split('_')[-1]
    await query.message.answer(f'–í—ã –Ω–∞—á–∞–ª–∏ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {mammonth_id}. –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /stop_chat')

@dp.callback_query_handler(lambda callback_query: callback_query.data=='distribute')
async def handle_mammonths_distribute(query:types.CallbackQuery):
    await DistributeStates.first.set()
    
    await query.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ñ–ª–∫–∏')

@dp.message_handler(state=DistributeStates.first)
async def handle_distribution(message: types.Message, state: FSMContext):
    workers_mammonts = session.query(Mammoth).filter(Mammoth.belongs_to_worker == message.from_user.id).all()
    worker = session.query(Worker).filter(Worker.telegram_id == message.from_user.id).first()
    for mammonth in workers_mammonts:
        data = {'chat_id':mammonth.telegram_id, 'text':message.text}
        requests.post(url = f'https://api.telegram.org/bot{worker.token}/sendMessage', data = data)
    await state.finish()

@dp.message_handler(lambda message:message.text.startswith('/t'))
async def get_info_about_mammonth(message: types.Message):
    mammonth_service_id = message.text.split('t')[1]
    mammonth = session.query(Mammoth).filter(Mammoth.service_id == mammonth_service_id).first()
    worker = session.query(Worker).filter(Worker.telegram_id == message.from_user.id).first()
    try:
        if mammonth.belongs_to_worker == worker.telegram_id:

            template = f'''
üíô –ú–∞–º–æ–Ω—Ç —Å ID *{mammonth.service_id}* 

Telegram ID: `{mammonth.telegram_id}`
ID –º–∞–º–æ–Ω—Ç–∞: *t{mammonth.service_id}*
–ò–º—è: {mammonth.first_name}

–ë–∞–ª–∞–Ω—Å: {round(mammonth.balance,2)}‚ÇΩ
–ù–∞ –≤—ã–≤–æ–¥–µ: {mammonth.on_output} ‚ÇΩ
–í–∞–ª—é—Ç–∞: RUB
    '''
            await message.answer(template, parse_mode=ParseMode.MARKDOWN, reply_markup=mammont_management_buttons(mammonth.telegram_id))
    except AttributeError:
        await message.answer('–ú–∞–º–æ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!')

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('{"show_stats":'))
async def handle_mammonth_show_stats(query:types.CallbackQuery):
    mammonth_telegram_id = json.loads(query.data)['show_stats']
    mamonth = session.query(Mammoth).filter(Mammoth.telegram_id == mammonth_telegram_id).first()
    template = f'''
üñ§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–º–æ–Ω—Ç–∞ *t{mamonth.service_id}* _{mamonth.first_name}_

–£–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: *{mamonth.succesful_deals}*
–ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: *{mamonth.deals - mamonth.succesful_deals}*
–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: *{mamonth.profit}*‚ÇΩ 
    
    
    '''
    await query.message.answer(template, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('{"change_luck":'))
async def handle_change_luck_mammonth(query:types.CallbackQuery):
    button = query.message.reply_markup.inline_keyboard[0][0]

    mammonth = session.query(Mammoth).filter(Mammoth.telegram_id == json.loads(query.data)['change_luck']).first()
    if mammonth.luck == 100:
        mammonth.luck = 0
    else:
        mammonth.luck += 25
    session.commit()
    button.text = f'–£–¥–∞—á–∞ {mammonth.luck}%'

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await query.message.edit_reply_markup(reply_markup=query.message.reply_markup)

class Change_mammonths_balance(StatesGroup):
    first = State()

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('{"change_balance":'))
async def handle_change_balance_mammonth(query:types.CallbackQuery):
    state = dp.current_state(chat=query.message.chat.id, user=query.from_user.id)
    data = dict()
    data['id'] = json.loads(query.data)['change_balance']
    await  state.set_data(data)
    await Change_mammonths_balance.first.set()
    await query.answer('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞ –º–∞–º–æ–Ω—Ç–∞')

@dp.message_handler(state=Change_mammonths_balance.first)
async def change_balance(message: types.Message, state: FSMContext):
    data = await state.get_data()
    mammonth_telegram_id =data['id']
    mamonth = session.query(Mammoth).filter(Mammoth.telegram_id == mammonth_telegram_id ).first()
    try:
        mamonth.balance = float(message.text)
        session.commit()
        await message.answer("–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    except Exception as ex:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ')
    await  state.finish()

async def process_sqs_messages():
    session_aws = get_session()

    async with session_aws.create_client( service_name = 'sqs',
    aws_access_key_id=aws_access_key_id,
    aws_secret_access_key=aws_secret_access_key,
    region_name=aws_region) as sqs:
        while True:
            response = await sqs.receive_message(
                QueueUrl='https://sqs.eu-north-1.amazonaws.com/441199499768/NewApplications',
                AttributeNames=['All'],
                MaxNumberOfMessages=1,
                MessageAttributeNames=['All'],
                VisibilityTimeout=0,
                WaitTimeSeconds=0
            )
            response_for_deals = await sqs.receive_message(
                QueueUrl='https://sqs.eu-north-1.amazonaws.com/441199499768/NewApplicationsOnBid',
                AttributeNames=['All'],
                MaxNumberOfMessages=1,
                MessageAttributeNames=['All'],
                VisibilityTimeout=0,
                WaitTimeSeconds=0


            )
            response_for_withdraws = await sqs.receive_message(
                QueueUrl='https://sqs.eu-north-1.amazonaws.com/441199499768/ApplicationsToWithdraw1',
                AttributeNames=['All'],
                MaxNumberOfMessages=1,
                MessageAttributeNames=['All'],
                VisibilityTimeout=0,
                WaitTimeSeconds=0

            )
            try:
                diction_for_deals = response_for_deals['Messages'][0]['Body']
                msg_attributes = (json.loads(diction_for_deals).get('MessageAttributes'))
                MammonthTelegramId = json.loads(msg_attributes).get('MammonthTelegramId')
                Amount = json.loads(diction_for_deals).get('Amount')
                mammonth = session.query(Mammoth).filter(Mammoth.telegram_id == MammonthTelegramId).first()
                if Amount < 0:
                    await  bot.send_message(mammonth.belongs_to_worker, f'{mammonth.name} —Å–æ–≤–µ—Ä—à–∏–ª –Ω–µ–ø—Ä–∏–±—ã–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É –∏ –ø–æ—Ç–µ—Ä—è–ª {Amount} RUB')
                else:
                    await  bot.send_message(mammonth.belongs_to_worker, f'{mammonth.name} —Å–æ–≤–µ—Ä—à–∏–ª –ø—Ä–∏–±—ã–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É –∏ –ø–æ–ª—É—á–∏–ª {Amount} RUB')
            except Exception as ex:
                print(ex)

            try:
                diction = response['Messages'][0]['Body']
                msg_attributes = (json.loads(diction).get('MessageAttributes'))
                print(msg_attributes)
                print(msg_attributes['MammonthId']['Value'])
                print(msg_attributes['Sum']['Value'])
                await bot.send_message(
                    int(msg_attributes['WorkerId']['Value']),
                    f'''üíπ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! (–¢—Ä–µ–π–¥–∏–Ω–≥)
                    

üêò –ú–∞–º–æ–Ω—Ç: {msg_attributes['FirstName']['Value']} [/t{msg_attributes['MammonthId']['Value']}]!!
üí≥ –°—É–º–º–∞: {msg_attributes['Sum']['Value']} RUB
                ''', reply_markup=create_top_up_mammonths_balance_button(mammonths_telegram_id=msg_attributes['MammonthId']['Value'], amount=msg_attributes['Sum']['Value'])
                )
                message = response['Messages'][0]
                receipt_handle = message['ReceiptHandle']
                await sqs.delete_message(QueueUrl='https://sqs.eu-north-1.amazonaws.com/441199499768/NewApplications', ReceiptHandle=receipt_handle)

            except Exception as ex:
                print(ex)
                print('!!!!!!')


            try:
                message = response_for_withdraws['Messages'][0]
                receipt_handle = message['ReceiptHandle']
                diction_for_withdraws = response_for_withdraws['Messages'][0]['Body']
                msg_attributes = (json.loads(diction_for_withdraws).get('MessageAttributes'))
                print(msg_attributes)
                withdraw_id = msg_attributes.get('withdraw_id')['Value']
                print(msg_attributes, withdraw_id)
                withdraw = session.query(Withdraws).filter(Withdraws.id == int(withdraw_id)).first()
                mammonth = session.query(Mammoth).filter(Mammoth.telegram_id == withdraw.user_id).first()

                await bot.send_message(mammonth.belongs_to_worker, f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mammonth.first_name} (/t{mammonth.service_id}) —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ *{withdraw.amount}* 
                –Ω–∞ —Å—á–µ—Ç `{withdraw.card}`''', parse_mode=ParseMode.MARKDOWN, reply_markup=withdraw_actions(int(withdraw_id)))
                await  sqs.delete_message(QueueUrl='https://sqs.eu-north-1.amazonaws.com/441199499768/ApplicationsToWithdraw1', ReceiptHandle=receipt_handle)
            except Exception as ex:
                print(ex, "–ø–∏—à–∫–∞")
            await asyncio.sleep(10)


@dp.callback_query_handler(lambda callback_query:callback_query.data.startswith('accept_withdraw'))
async def handle_accept_withdraw(query: types.CallbackQuery):
    withdraw_id = query.data.split('_')[2]
    withdraw = session.query(Withdraws).filter(Withdraws.id == withdraw_id).first()
    mammont = session.query(Mammoth).filter(Mammoth.telegram_id == withdraw.user_id).first()
    worker = session.query(Worker).filter(Worker.telegram_id == mammont.belongs_to_worker).first()
    data = {'chat_id': mammont.telegram_id, 'text': f'''
    –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.
    –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {withdraw.amount} RUB 
        '''}
    requests.post(url=f'https://api.telegram.org/bot{worker.token}/sendMessage', data=data)

    await query.message.answer('–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥')

@dp.callback_query_handler(lambda callback_query:callback_query.data.startswith('deny_withdraw'))
async def handle_accept_withdraw(query: types.CallbackQuery):
    withdraw_id = query.data.split('_')[2]
    withdraw = session.query(Withdraws).filter(Withdraws.id == withdraw_id).first()
    mammont = session.query(Mammoth).filter(Mammoth.telegram_id == withdraw.user_id).first()
    worker = session.query(Worker).filter(Worker.telegram_id == mammont.belongs_to_worker).first()
    data = {'chat_id': mammont.telegram_id, 'text': f'''
–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.
–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å {withdraw.amount} RUB 
    '''}
    requests.post(url=f'https://api.telegram.org/bot{worker.token}/sendMessage', data=data)

    mammont.balance += withdraw.amount
    session.commit()
    await query.message.answer('–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥')

class QuestionsAndAnswersStates(StatesGroup):
    first = State()
    second = State()
    third = State()


class create_mirror_bot_states(StatesGroup):
    first = State()
    second = State()

class create_mirror_for_escort_bot_states(StatesGroup):
    first = State()
    second = State()

def admin_approval_button(telegram_id):

    return InlineKeyboardMarkup().add(InlineKeyboardButton("–†–∞–∑—Ä–µ—à–∏—Ç—å –≤–æ—Ä–∫–µ—Ä—É —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data=json.dumps({"approvetocreateaccount":telegram_id})),
                                                           InlineKeyboardButton(
        '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å', callback_data=json.dumps({"disapprovetocreateaccount":telegram_id})))


def create_button_how_to_input_token():
    url = 'https://telegra.ph/Kak-sdelat-token-dlya-zerkala-04-07'
    return InlineKeyboardMarkup().add(InlineKeyboardButton("–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω?", url=url))

def create_agree_button():
    return InlineKeyboardMarkup().add(InlineKeyboardButton('–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏', callback_data='agreewithterms'))


def create_verification_button():
    return InlineKeyboardMarkup().add(InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é', callback_data='verifyThatUserIsNotUkrainian'))

def create_top_up_mammonths_balance_button(mammonths_telegram_id, amount):
    print(json.dumps({'mammonths_telegram_id' : mammonths_telegram_id, 'amount':amount}))
    return InlineKeyboardMarkup().add(InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data=json.dumps({'mammonths_telegram_id' : mammonths_telegram_id, 'amount':amount})))


def after_mamonts_management():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('–ú–æ–∏ –º–∞–º–æ–Ω—Ç—ã', callback_data='my_mammonts'))
    kb.add(InlineKeyboardButton('–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', callback_data='distribute'))
    kb.add(InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='mammonts_settings'))
    return kb


inline_kb_for_payouts = InlineKeyboardMarkup()
inline_kb_for_payouts.add(InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥', callback_data='approve_payout'))

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'approve_payout')
async def approve_payout_handler(query:types.CallbackQuery):
    await PayoutForWorkerStates.first.set()
    await query.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ')



class PayoutForWorkerStates(StatesGroup):
    first = State()
    second = State()

@dp.message_handler(state=PayoutForWorkerStates.first)
async def payout_for_worker_states(message:types.Message, state:FSMContext):
    worker = session.query(Worker).filter(Worker.telegram_id == message.from_user.id).first()
    try:

        if float(message.text) <= worker.balance:
            state1 = dp.current_state(chat=message.chat.id, user=message.from_user.id)
            data = {}
            data['worker_id'] = int(message.from_user.id)
            data['amount'] = float(message.text)
            await state1.set_data(data)
            await  PayoutForWorkerStates.second.set()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ USDT –≤ —Å–µ—Ç–∏ TRON')

        else:
            await message.answer('–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            await state.finish()
    except Exception as ex:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.finish()


def keyboard_to_approve_payout(order_id):
    kb = InlineKeyboardMarkup()
    return kb.add(InlineKeyboardButton('–î–∞!', callback_data=f'yes_{order_id}')).add(InlineKeyboardButton('–ù–µ—Ç', callback_data=f'no_{order_id}'))
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('yes_') or callback_query.data.startswith('no_'))
async def handle_approving_or_disapproving_of_payout(query:types.CallbackQuery):
    order_id = query.data.split('_')[1]
    payout  = session.query(Payouts).filter(Payouts.order_id == order_id).first()
    worker = session.query(Worker).filter(Worker.telegram_id == query.from_user.id).first()
    if query.data.startswith('yes_'):
        await query.message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø–æ–¥–∞–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ')
        inline_keyboard = {
            "inline_keyboard": [
                [
                    {"text": "–ü—Ä–∏–Ω—è—Ç—å", "callback_data": f"approve_payout_{order_id}"},
                    {"text": "–û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"disapprove_payout_{order_id}"}
                ]
            ]

        }
        data_For_tg = {
            "chat_id": support_team[0],
            "text": f"""
–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥
–í–æ—Ä–∫–µ—Ä {worker.name} —Å –∞–π–¥–∏ {worker.telegram_id} —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ {payout.amount} RUB –Ω–∞ –∞–¥—Ä–µ—Å {payout.address}""",
            "reply_markup": inline_keyboard,

        }
        await query.message.answer(f'''{requests.post(f'https://api.telegram.org/bot{payout_for_admins_bot_token}/sendMessage', json=data_For_tg).text}''')

    else:
        session.delete(payout)
        await query.message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
    session.commit()
@dp.message_handler(state=PayoutForWorkerStates.second)
async def payout_for_worker_states_second_handler(message:types.Message,state:FSMContext):
    data = await state.get_data()
    response = requests.get('https://apilist.tronscan.io/api/account?address='+message.text)
    await state.finish()
    try:
        address = response.json()['activePermissions'][0]['keys'][0]['address']
        payout = Payouts(worker_id = message.from_user.id, amount = data['amount'], address = address)
        session.add(payout)
        session.commit()
        await message.answer(f'''
–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ - `{address}`
–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - *{data['amount']} RUB*
–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?

''', reply_markup=keyboard_to_approve_payout(payout.order_id), parse_mode=ParseMode.MARKDOWN)
        await state.finish()
    except:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å')
        await state.finish()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'payout_for_worker')
async def payout_for_worker_handler(query:types.CallbackQuery):
    worker = session.query(Worker).filter(Worker.telegram_id == query.from_user.id).first()
    if session.query(Payouts).filter(Payouts.worker_id == query.from_user.id).first():
        await query.message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥, –ø–æ–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ')
        return
    if worker.balance >= 2000:
        await query.message.answer(f'''
–î–ª—è –≤—ã–≤–æ–¥–∞ —É –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ *{worker.balance}* RUB
–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ *–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ USDT –≤ —Å–µ—Ç–∏ TRON*.
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É _–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥_ —á—Ç–æ–± —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.
''', parse_mode=ParseMode.MARKDOWN, reply_markup= inline_kb_for_payouts)
    else:
        await query.message.answer(f'''
–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å 2000 RUB –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ
–í–∞—à –±–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å - *{worker.balance}*
''', parse_mode=ParseMode.MARKDOWN)
markup_for_payout = InlineKeyboardMarkup()
markup_for_payout.add(InlineKeyboardButton('–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', callback_data='payout_for_worker'))

markup = ReplyKeyboardMarkup(resize_keyboard=True)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
profile_button = KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å üê≥")
nft_button = KeyboardButton("NFT üí†")
trading_button = KeyboardButton("–¢—Ä–µ–π–¥–∏–Ω–≥ üìä")
casino_button = KeyboardButton("–ö–∞–∑–∏–Ω–æ üé∞")
arbitrage_button = KeyboardButton("–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê")
about_button = KeyboardButton("–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª")
escort_button = KeyboardButton("–≠—Å–∫–æ—Ä—Çüíù")
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–Ω–æ–ø–æ–∫)
markup.add(profile_button, nft_button, trading_button, escort_button)
markup.add(casino_button, arbitrage_button, about_button)


def create_markup_for_escort():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–º–æ–Ω—Ç–∞–º', callback_data='mammonths_management_for_escort_bot'))
    markup.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –∑–µ—Ä–∫–∞–ª–æ –±–æ—Ç–∞', callback_data='create_mirror_for_escort_bot'))
    markup.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å', callback_data='create_model_for_escort_bot'))
    return markup

def create_markup_for_trading():
    markup_for_trading = InlineKeyboardMarkup()
    markup_for_trading.add(InlineKeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–º–æ–Ω—Ç–∞–º', callback_data='mammonths_management'))
    markup_for_trading.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –∑–µ—Ä–∫–∞–ª–æ –±–æ—Ç–∞', callback_data='create_mirror'))
    markup_for_trading.add(InlineKeyboardButton('–ú–∏–Ω–∏–º–∞–ª–∫–∞', callback_data='minimal_amount'))
    return markup_for_trading
@dp.message_handler(lambda message: message.text in ["–ü—Ä–æ—Ñ–∏–ª—å üê≥", "NFT üí†", "–¢—Ä–µ–π–¥–∏–Ω–≥ üìä", "–ö–∞–∑–∏–Ω–æ üé∞", "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê", "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª", '–≠—Å–∫–æ—Ä—Çüíù'])
async def handle_menu(message: types.Message):
    user = session.query(Worker).filter(Worker.telegram_id==message.from_user.id).first()
    if not user:
        await message.answer('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –≤–æ—Ä–∫–µ—Ä–æ–≤')
        return
    service_id = session.query(Worker).filter(Worker.telegram_id == message.from_user.id).first().service_id

    if message.text == "–ü—Ä–æ—Ñ–∏–ª—å üê≥":
        await showprofile(message)
    elif message.text == "NFT üí†":
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ 'NFT üí†'")
    elif message.text == "–¢—Ä–µ–π–¥–∏–Ω–≥ üìä":

        template =f'''
üìä –¢—Ä–µ–π–¥–∏–Ω–≥

üìã –í–∞—à –∫–æ–¥: `{service_id}`
üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [–ù–ê–ñ–ú–ò –ò –°–ö–û–ü–ò–†–£–ô](https://t.me/HotBiitBot?start={service_id})
        
        
        
        '''
        await message.answer(template, reply_markup=create_markup_for_trading(), parse_mode=ParseMode.MARKDOWN)
    elif message.text == '–≠—Å–∫–æ—Ä—Çüíù':
        await message.answer(f'''
üíù –≠—Å–∫–æ—Ä—Ç

üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É [–∑–¥–µ—Å—å](https://telegra.ph/RGT--EHskort-09-23)
üìã –í–∞—à –∫–æ–¥: [`{service_id}`]
        
    ''', parse_mode=ParseMode.MARKDOWN, reply_markup=create_markup_for_escort())
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ö–∞–∑–∏–Ω–æ üé∞'")
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê'")
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª'")


async def showprofile(message: types.Message):
    worker = session.query(Worker).filter(Worker.telegram_id == message.from_user.id).first()
    await generate_profile_stats_for_worker(str(worker.telegram_id), str(worker.balance), str(worker.profit), str(worker.warnings), worker.payment_method )
    caption = f"""
üóÉ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å [{worker.telegram_id}],  0 —É—Ä–æ–≤–µ–Ω—å!

–ö–æ–¥ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤: {worker.service_id}

üí∏ –£ —Ç–µ–±—è {worker.profit_quantity} –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É {worker.profit} RUB
–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç {(lambda profit, profit_quantity: 0 if profit_quantity == 0 else profit / profit_quantity)(worker.profit, worker.profit_quantity)} RUB

–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {len(session.query(Mammoth).filter(Mammoth.belongs_to_worker == message.from_user.id).all())} –º–∞–º–º–æ–Ω—Ç–æ–≤, {len(worker.invited_worker.split(','))-1} –≤–æ—Ä–∫–µ—Ä–æ–≤ 
–ë–∞–ª–∞–Ω—Å: {worker.balance} RUB
–°—Ç–∞—Ç—É—Å: –í–æ—Ä–∫–µ—Ä
–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: [{worker.warnings}/3]
–°–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã: {worker.payment_method}

–í –∫–æ–º–∞–Ω–¥–µ: {(datetime.utcnow() - worker.created_at).days+1} –¥–µ–Ω—å/–¥–Ω—è

üåï –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ—Ä–∫–∞–µ–º!
    
    
    
    """

    await message.answer('‚ö°', reply_markup=markup)
    with open(f'{worker.telegram_id}.png', 'rb') as img:
        await bot.send_photo(chat_id=message.chat.id, photo=InputFile(img), caption=caption, reply_markup=markup_for_payout)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):


    try:

        service_id = int(message.get_args())
        worker = session.query(Worker).filter(Worker.service_id == service_id).first()
        if message.from_user.id != worker.telegram_id:
            worker.invited_worker += f'{message.from_user.id},'
            session.commit()

            await bot.send_message(chat_id= worker.telegram_id,text = '–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª –Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä!')
    except Exception as ex:
        'ok'

    if not session.query(Worker).filter(Worker.telegram_id == message.from_user.id).first():
    # –¢–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
        rules_text = """
üí¨ –ü—Ä–∞–≤–∏–ª–∞ Binance Naeb  üí¨ 

–ó–∞–ø—Ä–µ—â–µ–Ω–æ:

`üî∏ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, 18+ GIF/–°—Ç–∏–∫–µ—Ä–æ–≤/–í–∏–¥–µ–æ/–§–æ—Ç–æ`
`üî∏ –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ`
`üî∏ –†–µ–∫–ª–∞–º–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–ª–∏ –∂–µ —É—Å–ª—É–≥`
`üî∏ –î–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ`
`üî∏ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã`
`üî∏ –°–ø–∞–º–∏—Ç—å –∏–ª–∏ —Ç–µ–≥–∞—Ç—å —Å—Ç–∞—Ñ—Ñ, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤–∞–º –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç –≤ –ª—Å`
`üî∏ –û—Å–∫–æ—Ä–±–ª—è—Ç—å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å/–≤—ã—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–∏ –ø–æ–ª–∏—Ç –≤–∑–≥–ª—è–¥—ã`
`üî∏ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –¢–ü –∫—Ä–æ–º–µ –±–æ—Ç–æ–≤ —Ç–∏–º—ã`
`üî∏ –û—Å–∫–æ—Ä–±–ª—è—Ç—å –ª—é–±–æ–≥–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏`

–í—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ ‚úÖ
    """

        await  message.answer('‚ö°', reply_markup=markup)
        msg = await message.reply(rules_text, parse_mode=ParseMode.MARKDOWN, reply_markup=create_agree_button())
        loop = asyncio.get_event_loop()
        loop.run_until_complete(await process_sqs_messages())
    else:
        await showprofile(message)
        loop = asyncio.get_event_loop()
        loop.run_until_complete(await process_sqs_messages())

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'agreewithterms')
async def handle_agree_callback(query: types.CallbackQuery):
    await query.message.delete()
    await query.message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
                        "1. –£ –≤–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Ç–∞–∫–æ–π —Å—Ñ–µ—Ä–µ? (–î–∞/–ù–µ—Ç)")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await QuestionsAndAnswersStates.first.set()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'create_mirror_for_escort_bot')
async def create_mirror_for_escort_bot_handler(query: types.CallbackQuery):
    await create_mirror_for_escort_bot_states.first.set()
    await query.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞', reply_markup=create_button_how_to_input_token())

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'create_mirror')
async def create_mirror_handler(query: types.CallbackQuery):



    await create_mirror_bot_states.first.set()
    await query.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞', reply_markup=create_button_how_to_input_token())


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'my_mammonts' )
async def my_mammonts_handler(query: types.CallbackQuery):
    worker = session.query(Worker).filter(Worker.telegram_id ==  query.from_user.id  ).first()
    template = '–í–∞—à–∏ –º–∞–º–º–æ–Ω—Ç—ã'
    from aiogram.types import  User
    mammonts = worker.mammonts.split(',')[:-1]
    for mammont in mammonts:
        mammont_from_db = session.query(Mammoth).filter(Mammoth.telegram_id == mammont).first()

        template += f'''
–£ —Ç–µ–±—è {len(mammonts)} –º–∞–º–æ–Ω—Ç/–º–∞–º–æ–Ω—Ç–∞
(/t{mammont_from_db.service_id}) - {mammont_from_db.first_name} - *{mammont_from_db.balance}*, –§–∞—Ä—Ç - {mammont_from_db.luck}
'''
    await query.message.answer(template, parse_mode=ParseMode.MARKDOWN)
@dp.message_handler(state=create_mirror_for_escort_bot_states.first)
async def create_mirror_for_escort_bot_states_first_handler(message: types.Message, state: FSMContext):
    worker = session.query(Worker).filter(Worker.telegram_id == message.from_user.id).first()

    async with state.proxy() as data:
        data['mirror_bot_token'] = message.text
    await state.finish()
    import threading
    mirror_bot_thread = threading.Thread(target=create_mirror_of_escort_bot, args=(message.text, message.from_user.id))
    mirror_bot_thread.start()
    try:
        if Bot(message.text):
            await message.reply(f"""–°–æ–∑–¥–∞–Ω–∏–µ –∑–µ—Ä–∫–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!""", parse_mode=ParseMode.MARKDOWN)
            worker.token = message.text
            session.commit()


    except:
        await message.reply(f"""–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω!""", parse_mode=ParseMode.MARKDOWN)
@dp.message_handler(state=create_mirror_bot_states.first)
async def create_mirror_states_first_handler(message: types.Message, state: FSMContext):
    worker = session.query(Worker).filter(Worker.telegram_id == message.from_user.id).first()

    async with state.proxy() as data:
        data['mirror_bot_token'] = message.text
    await state.finish()
    import threading
    mirror_bot_thread =  threading.Thread(target=create_mirror, args=(message.text, message.from_user.id))
    mirror_bot_thread.start()
    try:
        if Bot(message.text):
            await message.reply(f"""–°–æ–∑–¥–∞–Ω–∏–µ –∑–µ—Ä–∫–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!""", parse_mode=ParseMode.MARKDOWN)
            worker.token = message.text
            session.commit()


    except:
        await message.reply(f"""–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω!""", parse_mode=ParseMode.MARKDOWN)
@dp.callback_query_handler(lambda callback_query:callback_query.data=='mammonths_management')
async def mammonts_management_handler(query:types.CallbackQuery):
    worker_id = query.message.from_user.id

    await query.message.delete()
    await query.message.answer( 'üìä –í—ã–±–µ—Ä–∏—Ç–µ *–¥–µ–π—Å—Ç–≤–∏–µ*', reply_markup=after_mamonts_management(), parse_mode=ParseMode.MARKDOWN)



@dp.message_handler(state=QuestionsAndAnswersStates.first)
async def answer1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id'] = message.from_user.id
        data['answer1'] = message.text.lower()
    # –ó–∞–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    await message.reply("2. –û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    await QuestionsAndAnswersStates.second.set()

@dp.message_handler(state=QuestionsAndAnswersStates.second)
async def answer2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['answer2'] = message.text
    # –ó–∞–¥–∞–µ–º —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
    await message.reply("3. –£ –≤–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Ç–∞–∫–æ–π —Å—Ñ–µ—Ä–µ? (–î–∞/–ù–µ—Ç)")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
    await QuestionsAndAnswersStates.third.set()


@dp.message_handler(state=QuestionsAndAnswersStates.third)
async def answer3(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['answer3'] = message.text.lower()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(admin_chat_id, f"–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{data['id']}` \n"
                                         f"1. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ: {data['answer1']}\n"
                                         f"2. –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {data['answer2']}\n"
                                         f"3. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ: {data['answer3']}", parse_mode=ParseMode.MARKDOWN, reply_markup=admin_approval_button(
        message.from_user.id))
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('{"mammonths_telegram_id":'))
async def handle_top_up_mammonths_balance(query: types.CallbackQuery):
    data = json.loads(query.data)
    mammonths_telegram_id = int(data['mammonths_telegram_id'])
    amount = int(data['amount'])
    mammonth = session.query(Mammoth).filter(Mammoth.telegram_id==mammonths_telegram_id).first()
    mammonth.balance += amount
    session.commit()
    await query.message.answer('–í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞—è–≤–∫—É', parse_mode=ParseMode.MARKDOWN)

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('{"approvetocreateaccount": '))
async def handle_approve_callback(query: types.CallbackQuery):

    chat_id = json.loads(query.data)['approvetocreateaccount']
    chat = await  bot.get_chat(chat_id)
    await bot.send_message(chat_id, "–í—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –¢–µ–ø–µ—Ä—å –≤—ã –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤")

    new_user = Worker(telegram_id=chat_id, name=chat.username, token='6697933833:AAHN1XS3c8xYnk8MpePa8CyPYD03cxbCSbg')
    session.add(new_user)
    session.commit()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('{"disapprovetocreateaccount": '))
async def handle_approve_callback(query: types.CallbackQuery):
    chat_id = json.loads(query.data)['approvetocreateaccount']
    await bot.send_message(chat_id, "–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤")






if __name__ == '__main__':

    from aiogram import executor
    import threading

    mirror_bot_threadw = threading.Thread(target=create_mirror_of_payout_bot, args=('6415616043:AAHLjQXT08DSEvk_OVIupYlNftSeo2FpACY',))
    mirror_bot_threadw.start()
    mirror_bot_thread = threading.Thread(target=create_mirror, args=('6697933833:AAHN1XS3c8xYnk8MpePa8CyPYD03cxbCSbg',))
    mirror_bot_thread.start()

    storage = MemoryStorage()
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º MemoryStorage –∫ –±–æ—Ç—É
    dp.storage = storage
    executor.start_polling(dp, skip_updates=True)
